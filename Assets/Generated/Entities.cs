// <auto-generated>
//     This code was generated with love by Gentitas.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using UnityEngine;
using System.Collections.Generic;

namespace DZ.Core {
    public sealed partial class StateEntity: Entitas.Entity, Entitas.IEntity {
        public StateEntity AddComponentByName(string name) {
            var componentIndex = StateComponentsLookup.GetComponentIndex(name);
            if (componentIndex == -1) throw new System.Exception("There is no component named " + name);
            return this.AddComponentByIndex(componentIndex);
        }

        public StateEntity AddComponentByIndex(int index) {
            this.AddComponent(index, this.CreateComponent(index, StateComponentsLookup.componentTypes[index]));
            return this;
        }

        //
        // Flag Components
        //

        // Loaded
        static readonly Components.State.Loaded _loadedComponent = new Components.State.Loaded();
        public bool loaded {
            get { return HasComponent(StateComponentsLookup.Loaded); }
            set {
                if (value != loaded) {
                    if (value) {
                        AddComponent(StateComponentsLookup.Loaded, _loadedComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.Loaded);
                    }
                }
            }
        }

        public bool HasLoaded() {
            return HasComponent(StateComponentsLookup.Loaded);
        }

        public void RemoveLoaded() {
            RemoveComponent(StateComponentsLookup.Loaded);
        }

        public void PingLoaded() {
            var component = GetComponent(StateComponentsLookup.Loaded);
            if (component != null) ReplaceComponent(StateComponentsLookup.Loaded, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.Loaded, null);
        }

        // Application
        static readonly Components.State.Application _applicationComponent = new Components.State.Application();
        public bool application {
            get { return HasComponent(StateComponentsLookup.Application); }
            set {
                if (value != application) {
                    if (value) {
                        AddComponent(StateComponentsLookup.Application, _applicationComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.Application);
                    }
                }
            }
        }

        public bool HasApplication() {
            return HasComponent(StateComponentsLookup.Application);
        }

        public void RemoveApplication() {
            RemoveComponent(StateComponentsLookup.Application);
        }

        public void PingApplication() {
            var component = GetComponent(StateComponentsLookup.Application);
            if (component != null) ReplaceComponent(StateComponentsLookup.Application, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.Application, null);
        }

        //
        // Value Components
        //

        // LoadingProgress
        public float _loadingProgress { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingProgress)) throw new System.Exception("Entity does not have component 'LoadingProgress'. You can check safely with 'HasLoadingProgress()'");
                return ((Components.State.LoadingProgress)GetComponent(StateComponentsLookup.LoadingProgress)).value;
            } 
            set {
                ((Components.State.LoadingProgress)GetComponent(StateComponentsLookup.LoadingProgress)).value = value;
            }
        }

        public float loadingProgress { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingProgress)) throw new System.Exception("Entity does not have component 'LoadingProgress'. You can check safely with 'HasLoadingProgress()'");
                return ((Components.State.LoadingProgress)GetComponent(StateComponentsLookup.LoadingProgress)).value;
            } 
            set {
                var component = CreateComponent<Components.State.LoadingProgress>(StateComponentsLookup.LoadingProgress);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.LoadingProgress, component);
            }
        }

        public bool HasLoadingProgress() {
            return HasComponent(StateComponentsLookup.LoadingProgress);
        }

        public void RemoveLoadingProgress() {
            if (HasComponent(StateComponentsLookup.LoadingProgress)) { RemoveComponent(StateComponentsLookup.LoadingProgress); }
        }

        public void PingLoadingProgress() {
            var component = GetComponent(StateComponentsLookup.LoadingProgress);
            if (component != null) ReplaceComponent(StateComponentsLookup.LoadingProgress, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.LoadingProgress, null);
        }

        // SceneName
        public string _sceneName { 
            get {
                if (!HasComponent(StateComponentsLookup.SceneName)) throw new System.Exception("Entity does not have component 'SceneName'. You can check safely with 'HasSceneName()'");
                return ((Components.State.SceneName)GetComponent(StateComponentsLookup.SceneName)).value;
            } 
            set {
                ((Components.State.SceneName)GetComponent(StateComponentsLookup.SceneName)).value = value;
            }
        }

        public string sceneName { 
            get {
                if (!HasComponent(StateComponentsLookup.SceneName)) throw new System.Exception("Entity does not have component 'SceneName'. You can check safely with 'HasSceneName()'");
                return ((Components.State.SceneName)GetComponent(StateComponentsLookup.SceneName)).value;
            } 
            set {
                var component = CreateComponent<Components.State.SceneName>(StateComponentsLookup.SceneName);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.SceneName, component);
            }
        }

        public bool HasSceneName() {
            return HasComponent(StateComponentsLookup.SceneName);
        }

        public void RemoveSceneName() {
            if (HasComponent(StateComponentsLookup.SceneName)) { RemoveComponent(StateComponentsLookup.SceneName); }
        }

        public void PingSceneName() {
            var component = GetComponent(StateComponentsLookup.SceneName);
            if (component != null) ReplaceComponent(StateComponentsLookup.SceneName, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.SceneName, null);
        }

        // LoadingManagerUnit
        public Scripts.LoadingManagerUnit _loadingManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingManagerUnit)) throw new System.Exception("Entity does not have component 'LoadingManagerUnit'. You can check safely with 'HasLoadingManagerUnit()'");
                return ((Components.State.LoadingManagerUnit)GetComponent(StateComponentsLookup.LoadingManagerUnit)).value;
            } 
            set {
                ((Components.State.LoadingManagerUnit)GetComponent(StateComponentsLookup.LoadingManagerUnit)).value = value;
            }
        }

        public Scripts.LoadingManagerUnit loadingManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingManagerUnit)) throw new System.Exception("Entity does not have component 'LoadingManagerUnit'. You can check safely with 'HasLoadingManagerUnit()'");
                return ((Components.State.LoadingManagerUnit)GetComponent(StateComponentsLookup.LoadingManagerUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.LoadingManagerUnit>(StateComponentsLookup.LoadingManagerUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.LoadingManagerUnit, component);
            }
        }

        public bool HasLoadingManagerUnit() {
            return HasComponent(StateComponentsLookup.LoadingManagerUnit);
        }

        public void RemoveLoadingManagerUnit() {
            if (HasComponent(StateComponentsLookup.LoadingManagerUnit)) { RemoveComponent(StateComponentsLookup.LoadingManagerUnit); }
        }

        public void PingLoadingManagerUnit() {
            var component = GetComponent(StateComponentsLookup.LoadingManagerUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.LoadingManagerUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.LoadingManagerUnit, null);
        }

        // LoadingSeconds
        public float _loadingSeconds { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingSeconds)) throw new System.Exception("Entity does not have component 'LoadingSeconds'. You can check safely with 'HasLoadingSeconds()'");
                return ((Components.State.LoadingSeconds)GetComponent(StateComponentsLookup.LoadingSeconds)).value;
            } 
            set {
                ((Components.State.LoadingSeconds)GetComponent(StateComponentsLookup.LoadingSeconds)).value = value;
            }
        }

        public float loadingSeconds { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingSeconds)) throw new System.Exception("Entity does not have component 'LoadingSeconds'. You can check safely with 'HasLoadingSeconds()'");
                return ((Components.State.LoadingSeconds)GetComponent(StateComponentsLookup.LoadingSeconds)).value;
            } 
            set {
                var component = CreateComponent<Components.State.LoadingSeconds>(StateComponentsLookup.LoadingSeconds);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.LoadingSeconds, component);
            }
        }

        public bool HasLoadingSeconds() {
            return HasComponent(StateComponentsLookup.LoadingSeconds);
        }

        public void RemoveLoadingSeconds() {
            if (HasComponent(StateComponentsLookup.LoadingSeconds)) { RemoveComponent(StateComponentsLookup.LoadingSeconds); }
        }

        public void PingLoadingSeconds() {
            var component = GetComponent(StateComponentsLookup.LoadingSeconds);
            if (component != null) ReplaceComponent(StateComponentsLookup.LoadingSeconds, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.LoadingSeconds, null);
        }
    }

}
namespace DZ.Game {
    public interface IFlagTrashEntity : Entitas.IEntity {
        bool flagTrash { get; set; }
        bool HasFlagTrash();
        void RemoveFlagTrash();
        void PingFlagTrash();
    }

    public interface IFlagTrashValidatedEntity : Entitas.IEntity {
        bool flagTrashValidated { get; set; }
        bool HasFlagTrashValidated();
        void RemoveFlagTrashValidated();
        void PingFlagTrashValidated();
    }

    public interface ITrashTimerEntity : Entitas.IEntity {
        float trashTimer { get; set; }
        bool HasTrashTimer();
        void RemoveTrashTimer();
        void PingTrashTimer();
    }

    public sealed partial class InputEntity: Entitas.Entity, Entitas.IEntity {
        public InputEntity AddComponentByName(string name) {
            var componentIndex = InputComponentsLookup.GetComponentIndex(name);
            if (componentIndex == -1) throw new System.Exception("There is no component named " + name);
            return this.AddComponentByIndex(componentIndex);
        }

        public InputEntity AddComponentByIndex(int index) {
            this.AddComponent(index, this.CreateComponent(index, InputComponentsLookup.componentTypes[index]));
            return this;
        }

        //
        // Flag Components
        //

        // FlagEvent
        static readonly Components.Input.FlagEvent _flagEventComponent = new Components.Input.FlagEvent();
        public bool flagEvent {
            get { return HasComponent(InputComponentsLookup.FlagEvent); }
            set {
                if (value != flagEvent) {
                    if (value) {
                        AddComponent(InputComponentsLookup.FlagEvent, _flagEventComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.FlagEvent);
                    }
                }
            }
        }

        public bool HasFlagEvent() {
            return HasComponent(InputComponentsLookup.FlagEvent);
        }

        public void RemoveFlagEvent() {
            RemoveComponent(InputComponentsLookup.FlagEvent);
        }

        public void PingFlagEvent() {
            var component = GetComponent(InputComponentsLookup.FlagEvent);
            if (component != null) ReplaceComponent(InputComponentsLookup.FlagEvent, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.FlagEvent, null);
        }

        // FlagTrash
        static readonly Components.Input.FlagTrash _flagTrashComponent = new Components.Input.FlagTrash();
        public bool flagTrash {
            get { return HasComponent(InputComponentsLookup.FlagTrash); }
            set {
                if (value != flagTrash) {
                    if (value) {
                        AddComponent(InputComponentsLookup.FlagTrash, _flagTrashComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.FlagTrash);
                    }
                }
            }
        }

        public bool HasFlagTrash() {
            return HasComponent(InputComponentsLookup.FlagTrash);
        }

        public void RemoveFlagTrash() {
            RemoveComponent(InputComponentsLookup.FlagTrash);
        }

        public void PingFlagTrash() {
            var component = GetComponent(InputComponentsLookup.FlagTrash);
            if (component != null) ReplaceComponent(InputComponentsLookup.FlagTrash, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.FlagTrash, null);
        }

        // FlagTrashValidated
        static readonly Components.Input.FlagTrashValidated _flagTrashValidatedComponent = new Components.Input.FlagTrashValidated();
        public bool flagTrashValidated {
            get { return HasComponent(InputComponentsLookup.FlagTrashValidated); }
            set {
                if (value != flagTrashValidated) {
                    if (value) {
                        AddComponent(InputComponentsLookup.FlagTrashValidated, _flagTrashValidatedComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.FlagTrashValidated);
                    }
                }
            }
        }

        public bool HasFlagTrashValidated() {
            return HasComponent(InputComponentsLookup.FlagTrashValidated);
        }

        public void RemoveFlagTrashValidated() {
            RemoveComponent(InputComponentsLookup.FlagTrashValidated);
        }

        public void PingFlagTrashValidated() {
            var component = GetComponent(InputComponentsLookup.FlagTrashValidated);
            if (component != null) ReplaceComponent(InputComponentsLookup.FlagTrashValidated, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.FlagTrashValidated, null);
        }

        // ChannelSwitchEvent
        static readonly Components.Input.ChannelSwitchEvent _channelSwitchEventComponent = new Components.Input.ChannelSwitchEvent();
        public bool channelSwitchEvent {
            get { return HasComponent(InputComponentsLookup.ChannelSwitchEvent); }
            set {
                if (value != channelSwitchEvent) {
                    if (value) {
                        AddComponent(InputComponentsLookup.ChannelSwitchEvent, _channelSwitchEventComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.ChannelSwitchEvent);
                    }
                }
            }
        }

        public bool HasChannelSwitchEvent() {
            return HasComponent(InputComponentsLookup.ChannelSwitchEvent);
        }

        public void RemoveChannelSwitchEvent() {
            RemoveComponent(InputComponentsLookup.ChannelSwitchEvent);
        }

        public void PingChannelSwitchEvent() {
            var component = GetComponent(InputComponentsLookup.ChannelSwitchEvent);
            if (component != null) ReplaceComponent(InputComponentsLookup.ChannelSwitchEvent, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.ChannelSwitchEvent, null);
        }

        // SubsRecordStartEvent
        static readonly Components.Input.SubsRecordStartEvent _subsRecordStartEventComponent = new Components.Input.SubsRecordStartEvent();
        public bool subsRecordStartEvent {
            get { return HasComponent(InputComponentsLookup.SubsRecordStartEvent); }
            set {
                if (value != subsRecordStartEvent) {
                    if (value) {
                        AddComponent(InputComponentsLookup.SubsRecordStartEvent, _subsRecordStartEventComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.SubsRecordStartEvent);
                    }
                }
            }
        }

        public bool HasSubsRecordStartEvent() {
            return HasComponent(InputComponentsLookup.SubsRecordStartEvent);
        }

        public void RemoveSubsRecordStartEvent() {
            RemoveComponent(InputComponentsLookup.SubsRecordStartEvent);
        }

        public void PingSubsRecordStartEvent() {
            var component = GetComponent(InputComponentsLookup.SubsRecordStartEvent);
            if (component != null) ReplaceComponent(InputComponentsLookup.SubsRecordStartEvent, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.SubsRecordStartEvent, null);
        }

        // SubsRecordStopEvent
        static readonly Components.Input.SubsRecordStopEvent _subsRecordStopEventComponent = new Components.Input.SubsRecordStopEvent();
        public bool subsRecordStopEvent {
            get { return HasComponent(InputComponentsLookup.SubsRecordStopEvent); }
            set {
                if (value != subsRecordStopEvent) {
                    if (value) {
                        AddComponent(InputComponentsLookup.SubsRecordStopEvent, _subsRecordStopEventComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.SubsRecordStopEvent);
                    }
                }
            }
        }

        public bool HasSubsRecordStopEvent() {
            return HasComponent(InputComponentsLookup.SubsRecordStopEvent);
        }

        public void RemoveSubsRecordStopEvent() {
            RemoveComponent(InputComponentsLookup.SubsRecordStopEvent);
        }

        public void PingSubsRecordStopEvent() {
            var component = GetComponent(InputComponentsLookup.SubsRecordStopEvent);
            if (component != null) ReplaceComponent(InputComponentsLookup.SubsRecordStopEvent, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.SubsRecordStopEvent, null);
        }

        // ModalOpenEvent
        static readonly Components.Input.ModalOpenEvent _modalOpenEventComponent = new Components.Input.ModalOpenEvent();
        public bool modalOpenEvent {
            get { return HasComponent(InputComponentsLookup.ModalOpenEvent); }
            set {
                if (value != modalOpenEvent) {
                    if (value) {
                        AddComponent(InputComponentsLookup.ModalOpenEvent, _modalOpenEventComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.ModalOpenEvent);
                    }
                }
            }
        }

        public bool HasModalOpenEvent() {
            return HasComponent(InputComponentsLookup.ModalOpenEvent);
        }

        public void RemoveModalOpenEvent() {
            RemoveComponent(InputComponentsLookup.ModalOpenEvent);
        }

        public void PingModalOpenEvent() {
            var component = GetComponent(InputComponentsLookup.ModalOpenEvent);
            if (component != null) ReplaceComponent(InputComponentsLookup.ModalOpenEvent, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.ModalOpenEvent, null);
        }

        // ModalCloseEvent
        static readonly Components.Input.ModalCloseEvent _modalCloseEventComponent = new Components.Input.ModalCloseEvent();
        public bool modalCloseEvent {
            get { return HasComponent(InputComponentsLookup.ModalCloseEvent); }
            set {
                if (value != modalCloseEvent) {
                    if (value) {
                        AddComponent(InputComponentsLookup.ModalCloseEvent, _modalCloseEventComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.ModalCloseEvent);
                    }
                }
            }
        }

        public bool HasModalCloseEvent() {
            return HasComponent(InputComponentsLookup.ModalCloseEvent);
        }

        public void RemoveModalCloseEvent() {
            RemoveComponent(InputComponentsLookup.ModalCloseEvent);
        }

        public void PingModalCloseEvent() {
            var component = GetComponent(InputComponentsLookup.ModalCloseEvent);
            if (component != null) ReplaceComponent(InputComponentsLookup.ModalCloseEvent, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.ModalCloseEvent, null);
        }

        // ModalOpenBackgroundEvent
        static readonly Components.Input.ModalOpenBackgroundEvent _modalOpenBackgroundEventComponent = new Components.Input.ModalOpenBackgroundEvent();
        public bool modalOpenBackgroundEvent {
            get { return HasComponent(InputComponentsLookup.ModalOpenBackgroundEvent); }
            set {
                if (value != modalOpenBackgroundEvent) {
                    if (value) {
                        AddComponent(InputComponentsLookup.ModalOpenBackgroundEvent, _modalOpenBackgroundEventComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.ModalOpenBackgroundEvent);
                    }
                }
            }
        }

        public bool HasModalOpenBackgroundEvent() {
            return HasComponent(InputComponentsLookup.ModalOpenBackgroundEvent);
        }

        public void RemoveModalOpenBackgroundEvent() {
            RemoveComponent(InputComponentsLookup.ModalOpenBackgroundEvent);
        }

        public void PingModalOpenBackgroundEvent() {
            var component = GetComponent(InputComponentsLookup.ModalOpenBackgroundEvent);
            if (component != null) ReplaceComponent(InputComponentsLookup.ModalOpenBackgroundEvent, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.ModalOpenBackgroundEvent, null);
        }

        // LevelEvent
        static readonly Components.Input.LevelEvent _levelEventComponent = new Components.Input.LevelEvent();
        public bool levelEvent {
            get { return HasComponent(InputComponentsLookup.LevelEvent); }
            set {
                if (value != levelEvent) {
                    if (value) {
                        AddComponent(InputComponentsLookup.LevelEvent, _levelEventComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.LevelEvent);
                    }
                }
            }
        }

        public bool HasLevelEvent() {
            return HasComponent(InputComponentsLookup.LevelEvent);
        }

        public void RemoveLevelEvent() {
            RemoveComponent(InputComponentsLookup.LevelEvent);
        }

        public void PingLevelEvent() {
            var component = GetComponent(InputComponentsLookup.LevelEvent);
            if (component != null) ReplaceComponent(InputComponentsLookup.LevelEvent, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.LevelEvent, null);
        }

        // MistakeHeavyEvent
        static readonly Components.Input.MistakeHeavyEvent _mistakeHeavyEventComponent = new Components.Input.MistakeHeavyEvent();
        public bool mistakeHeavyEvent {
            get { return HasComponent(InputComponentsLookup.MistakeHeavyEvent); }
            set {
                if (value != mistakeHeavyEvent) {
                    if (value) {
                        AddComponent(InputComponentsLookup.MistakeHeavyEvent, _mistakeHeavyEventComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.MistakeHeavyEvent);
                    }
                }
            }
        }

        public bool HasMistakeHeavyEvent() {
            return HasComponent(InputComponentsLookup.MistakeHeavyEvent);
        }

        public void RemoveMistakeHeavyEvent() {
            RemoveComponent(InputComponentsLookup.MistakeHeavyEvent);
        }

        public void PingMistakeHeavyEvent() {
            var component = GetComponent(InputComponentsLookup.MistakeHeavyEvent);
            if (component != null) ReplaceComponent(InputComponentsLookup.MistakeHeavyEvent, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.MistakeHeavyEvent, null);
        }

        // MistakeLightEvent
        static readonly Components.Input.MistakeLightEvent _mistakeLightEventComponent = new Components.Input.MistakeLightEvent();
        public bool mistakeLightEvent {
            get { return HasComponent(InputComponentsLookup.MistakeLightEvent); }
            set {
                if (value != mistakeLightEvent) {
                    if (value) {
                        AddComponent(InputComponentsLookup.MistakeLightEvent, _mistakeLightEventComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.MistakeLightEvent);
                    }
                }
            }
        }

        public bool HasMistakeLightEvent() {
            return HasComponent(InputComponentsLookup.MistakeLightEvent);
        }

        public void RemoveMistakeLightEvent() {
            RemoveComponent(InputComponentsLookup.MistakeLightEvent);
        }

        public void PingMistakeLightEvent() {
            var component = GetComponent(InputComponentsLookup.MistakeLightEvent);
            if (component != null) ReplaceComponent(InputComponentsLookup.MistakeLightEvent, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.MistakeLightEvent, null);
        }

        // ScoreHeavyEvent
        static readonly Components.Input.ScoreHeavyEvent _scoreHeavyEventComponent = new Components.Input.ScoreHeavyEvent();
        public bool scoreHeavyEvent {
            get { return HasComponent(InputComponentsLookup.ScoreHeavyEvent); }
            set {
                if (value != scoreHeavyEvent) {
                    if (value) {
                        AddComponent(InputComponentsLookup.ScoreHeavyEvent, _scoreHeavyEventComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.ScoreHeavyEvent);
                    }
                }
            }
        }

        public bool HasScoreHeavyEvent() {
            return HasComponent(InputComponentsLookup.ScoreHeavyEvent);
        }

        public void RemoveScoreHeavyEvent() {
            RemoveComponent(InputComponentsLookup.ScoreHeavyEvent);
        }

        public void PingScoreHeavyEvent() {
            var component = GetComponent(InputComponentsLookup.ScoreHeavyEvent);
            if (component != null) ReplaceComponent(InputComponentsLookup.ScoreHeavyEvent, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.ScoreHeavyEvent, null);
        }

        // ScoreLightEvent
        static readonly Components.Input.ScoreLightEvent _scoreLightEventComponent = new Components.Input.ScoreLightEvent();
        public bool scoreLightEvent {
            get { return HasComponent(InputComponentsLookup.ScoreLightEvent); }
            set {
                if (value != scoreLightEvent) {
                    if (value) {
                        AddComponent(InputComponentsLookup.ScoreLightEvent, _scoreLightEventComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.ScoreLightEvent);
                    }
                }
            }
        }

        public bool HasScoreLightEvent() {
            return HasComponent(InputComponentsLookup.ScoreLightEvent);
        }

        public void RemoveScoreLightEvent() {
            RemoveComponent(InputComponentsLookup.ScoreLightEvent);
        }

        public void PingScoreLightEvent() {
            var component = GetComponent(InputComponentsLookup.ScoreLightEvent);
            if (component != null) ReplaceComponent(InputComponentsLookup.ScoreLightEvent, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.ScoreLightEvent, null);
        }

        // GameOverEvent
        static readonly Components.Input.GameOverEvent _gameOverEventComponent = new Components.Input.GameOverEvent();
        public bool gameOverEvent {
            get { return HasComponent(InputComponentsLookup.GameOverEvent); }
            set {
                if (value != gameOverEvent) {
                    if (value) {
                        AddComponent(InputComponentsLookup.GameOverEvent, _gameOverEventComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.GameOverEvent);
                    }
                }
            }
        }

        public bool HasGameOverEvent() {
            return HasComponent(InputComponentsLookup.GameOverEvent);
        }

        public void RemoveGameOverEvent() {
            RemoveComponent(InputComponentsLookup.GameOverEvent);
        }

        public void PingGameOverEvent() {
            var component = GetComponent(InputComponentsLookup.GameOverEvent);
            if (component != null) ReplaceComponent(InputComponentsLookup.GameOverEvent, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.GameOverEvent, null);
        }

        //
        // Value Components
        //

        // TrashTimer
        public float _trashTimer { 
            get {
                if (!HasComponent(InputComponentsLookup.TrashTimer)) throw new System.Exception("Entity does not have component 'TrashTimer'. You can check safely with 'HasTrashTimer()'");
                return ((Components.Input.TrashTimer)GetComponent(InputComponentsLookup.TrashTimer)).value;
            } 
            set {
                ((Components.Input.TrashTimer)GetComponent(InputComponentsLookup.TrashTimer)).value = value;
            }
        }

        public float trashTimer { 
            get {
                if (!HasComponent(InputComponentsLookup.TrashTimer)) throw new System.Exception("Entity does not have component 'TrashTimer'. You can check safely with 'HasTrashTimer()'");
                return ((Components.Input.TrashTimer)GetComponent(InputComponentsLookup.TrashTimer)).value;
            } 
            set {
                var component = CreateComponent<Components.Input.TrashTimer>(InputComponentsLookup.TrashTimer);
                component.value = value;
                ReplaceComponent(InputComponentsLookup.TrashTimer, component);
            }
        }

        public bool HasTrashTimer() {
            return HasComponent(InputComponentsLookup.TrashTimer);
        }

        public void RemoveTrashTimer() {
            if (HasComponent(InputComponentsLookup.TrashTimer)) { RemoveComponent(InputComponentsLookup.TrashTimer); }
        }

        public void PingTrashTimer() {
            var component = GetComponent(InputComponentsLookup.TrashTimer);
            if (component != null) ReplaceComponent(InputComponentsLookup.TrashTimer, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.TrashTimer, null);
        }

        // EventId
        public string _eventId { 
            get {
                if (!HasComponent(InputComponentsLookup.EventId)) throw new System.Exception("Entity does not have component 'EventId'. You can check safely with 'HasEventId()'");
                return ((Components.Input.EventId)GetComponent(InputComponentsLookup.EventId)).value;
            } 
            set {
                ((Components.Input.EventId)GetComponent(InputComponentsLookup.EventId)).value = value;
            }
        }

        public string eventId { 
            get {
                if (!HasComponent(InputComponentsLookup.EventId)) throw new System.Exception("Entity does not have component 'EventId'. You can check safely with 'HasEventId()'");
                return ((Components.Input.EventId)GetComponent(InputComponentsLookup.EventId)).value;
            } 
            set {
                var component = CreateComponent<Components.Input.EventId>(InputComponentsLookup.EventId);
                component.value = value;
                ReplaceComponent(InputComponentsLookup.EventId, component);
            }
        }

        public bool HasEventId() {
            return HasComponent(InputComponentsLookup.EventId);
        }

        public void RemoveEventId() {
            if (HasComponent(InputComponentsLookup.EventId)) { RemoveComponent(InputComponentsLookup.EventId); }
        }

        public void PingEventId() {
            var component = GetComponent(InputComponentsLookup.EventId);
            if (component != null) ReplaceComponent(InputComponentsLookup.EventId, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.EventId, null);
        }

        // ModalId
        public string _modalId { 
            get {
                if (!HasComponent(InputComponentsLookup.ModalId)) throw new System.Exception("Entity does not have component 'ModalId'. You can check safely with 'HasModalId()'");
                return ((Components.Input.ModalId)GetComponent(InputComponentsLookup.ModalId)).value;
            } 
            set {
                ((Components.Input.ModalId)GetComponent(InputComponentsLookup.ModalId)).value = value;
            }
        }

        public string modalId { 
            get {
                if (!HasComponent(InputComponentsLookup.ModalId)) throw new System.Exception("Entity does not have component 'ModalId'. You can check safely with 'HasModalId()'");
                return ((Components.Input.ModalId)GetComponent(InputComponentsLookup.ModalId)).value;
            } 
            set {
                var component = CreateComponent<Components.Input.ModalId>(InputComponentsLookup.ModalId);
                component.value = value;
                ReplaceComponent(InputComponentsLookup.ModalId, component);
            }
        }

        public bool HasModalId() {
            return HasComponent(InputComponentsLookup.ModalId);
        }

        public void RemoveModalId() {
            if (HasComponent(InputComponentsLookup.ModalId)) { RemoveComponent(InputComponentsLookup.ModalId); }
        }

        public void PingModalId() {
            var component = GetComponent(InputComponentsLookup.ModalId);
            if (component != null) ReplaceComponent(InputComponentsLookup.ModalId, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.ModalId, null);
        }

        // WordLength
        public int _wordLength { 
            get {
                if (!HasComponent(InputComponentsLookup.WordLength)) throw new System.Exception("Entity does not have component 'WordLength'. You can check safely with 'HasWordLength()'");
                return ((Components.Input.WordLength)GetComponent(InputComponentsLookup.WordLength)).value;
            } 
            set {
                ((Components.Input.WordLength)GetComponent(InputComponentsLookup.WordLength)).value = value;
            }
        }

        public int wordLength { 
            get {
                if (!HasComponent(InputComponentsLookup.WordLength)) throw new System.Exception("Entity does not have component 'WordLength'. You can check safely with 'HasWordLength()'");
                return ((Components.Input.WordLength)GetComponent(InputComponentsLookup.WordLength)).value;
            } 
            set {
                var component = CreateComponent<Components.Input.WordLength>(InputComponentsLookup.WordLength);
                component.value = value;
                ReplaceComponent(InputComponentsLookup.WordLength, component);
            }
        }

        public bool HasWordLength() {
            return HasComponent(InputComponentsLookup.WordLength);
        }

        public void RemoveWordLength() {
            if (HasComponent(InputComponentsLookup.WordLength)) { RemoveComponent(InputComponentsLookup.WordLength); }
        }

        public void PingWordLength() {
            var component = GetComponent(InputComponentsLookup.WordLength);
            if (component != null) ReplaceComponent(InputComponentsLookup.WordLength, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.WordLength, null);
        }
    }

    public sealed partial class StateEntity: Entitas.Entity, Entitas.IEntity {
        public StateEntity AddComponentByName(string name) {
            var componentIndex = StateComponentsLookup.GetComponentIndex(name);
            if (componentIndex == -1) throw new System.Exception("There is no component named " + name);
            return this.AddComponentByIndex(componentIndex);
        }

        public StateEntity AddComponentByIndex(int index) {
            this.AddComponent(index, this.CreateComponent(index, StateComponentsLookup.componentTypes[index]));
            return this;
        }

        //
        // Flag Components
        //

        // FlagTrash
        static readonly Components.State.FlagTrash _flagTrashComponent = new Components.State.FlagTrash();
        public bool flagTrash {
            get { return HasComponent(StateComponentsLookup.FlagTrash); }
            set {
                if (value != flagTrash) {
                    if (value) {
                        AddComponent(StateComponentsLookup.FlagTrash, _flagTrashComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.FlagTrash);
                    }
                }
            }
        }

        public bool HasFlagTrash() {
            return HasComponent(StateComponentsLookup.FlagTrash);
        }

        public void RemoveFlagTrash() {
            RemoveComponent(StateComponentsLookup.FlagTrash);
        }

        public void PingFlagTrash() {
            var component = GetComponent(StateComponentsLookup.FlagTrash);
            if (component != null) ReplaceComponent(StateComponentsLookup.FlagTrash, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.FlagTrash, null);
        }

        // FlagTrashValidated
        static readonly Components.State.FlagTrashValidated _flagTrashValidatedComponent = new Components.State.FlagTrashValidated();
        public bool flagTrashValidated {
            get { return HasComponent(StateComponentsLookup.FlagTrashValidated); }
            set {
                if (value != flagTrashValidated) {
                    if (value) {
                        AddComponent(StateComponentsLookup.FlagTrashValidated, _flagTrashValidatedComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.FlagTrashValidated);
                    }
                }
            }
        }

        public bool HasFlagTrashValidated() {
            return HasComponent(StateComponentsLookup.FlagTrashValidated);
        }

        public void RemoveFlagTrashValidated() {
            RemoveComponent(StateComponentsLookup.FlagTrashValidated);
        }

        public void PingFlagTrashValidated() {
            var component = GetComponent(StateComponentsLookup.FlagTrashValidated);
            if (component != null) ReplaceComponent(StateComponentsLookup.FlagTrashValidated, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.FlagTrashValidated, null);
        }

        // FlagLoaded
        static readonly Components.State.FlagLoaded _flagLoadedComponent = new Components.State.FlagLoaded();
        public bool flagLoaded {
            get { return HasComponent(StateComponentsLookup.FlagLoaded); }
            set {
                if (value != flagLoaded) {
                    if (value) {
                        AddComponent(StateComponentsLookup.FlagLoaded, _flagLoadedComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.FlagLoaded);
                    }
                }
            }
        }

        public bool HasFlagLoaded() {
            return HasComponent(StateComponentsLookup.FlagLoaded);
        }

        public void RemoveFlagLoaded() {
            RemoveComponent(StateComponentsLookup.FlagLoaded);
        }

        public void PingFlagLoaded() {
            var component = GetComponent(StateComponentsLookup.FlagLoaded);
            if (component != null) ReplaceComponent(StateComponentsLookup.FlagLoaded, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.FlagLoaded, null);
        }

        // FlagActive
        static readonly Components.State.FlagActive _flagActiveComponent = new Components.State.FlagActive();
        public bool flagActive {
            get { return HasComponent(StateComponentsLookup.FlagActive); }
            set {
                if (value != flagActive) {
                    if (value) {
                        AddComponent(StateComponentsLookup.FlagActive, _flagActiveComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.FlagActive);
                    }
                }
            }
        }

        public bool HasFlagActive() {
            return HasComponent(StateComponentsLookup.FlagActive);
        }

        public void RemoveFlagActive() {
            RemoveComponent(StateComponentsLookup.FlagActive);
        }

        public void PingFlagActive() {
            var component = GetComponent(StateComponentsLookup.FlagActive);
            if (component != null) ReplaceComponent(StateComponentsLookup.FlagActive, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.FlagActive, null);
        }

        // FlagOpened
        static readonly Components.State.FlagOpened _flagOpenedComponent = new Components.State.FlagOpened();
        public bool flagOpened {
            get { return HasComponent(StateComponentsLookup.FlagOpened); }
            set {
                if (value != flagOpened) {
                    if (value) {
                        AddComponent(StateComponentsLookup.FlagOpened, _flagOpenedComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.FlagOpened);
                    }
                }
            }
        }

        public bool HasFlagOpened() {
            return HasComponent(StateComponentsLookup.FlagOpened);
        }

        public void RemoveFlagOpened() {
            RemoveComponent(StateComponentsLookup.FlagOpened);
        }

        public void PingFlagOpened() {
            var component = GetComponent(StateComponentsLookup.FlagOpened);
            if (component != null) ReplaceComponent(StateComponentsLookup.FlagOpened, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.FlagOpened, null);
        }

        // LevelPart
        static readonly Components.State.LevelPart _levelPartComponent = new Components.State.LevelPart();
        public bool levelPart {
            get { return HasComponent(StateComponentsLookup.LevelPart); }
            set {
                if (value != levelPart) {
                    if (value) {
                        AddComponent(StateComponentsLookup.LevelPart, _levelPartComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.LevelPart);
                    }
                }
            }
        }

        public bool HasLevelPart() {
            return HasComponent(StateComponentsLookup.LevelPart);
        }

        public void RemoveLevelPart() {
            RemoveComponent(StateComponentsLookup.LevelPart);
        }

        public void PingLevelPart() {
            var component = GetComponent(StateComponentsLookup.LevelPart);
            if (component != null) ReplaceComponent(StateComponentsLookup.LevelPart, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.LevelPart, null);
        }

        // Level
        static readonly Components.State.Level _levelComponent = new Components.State.Level();
        public bool level {
            get { return HasComponent(StateComponentsLookup.Level); }
            set {
                if (value != level) {
                    if (value) {
                        AddComponent(StateComponentsLookup.Level, _levelComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.Level);
                    }
                }
            }
        }

        public bool HasLevel() {
            return HasComponent(StateComponentsLookup.Level);
        }

        public void RemoveLevel() {
            RemoveComponent(StateComponentsLookup.Level);
        }

        public void PingLevel() {
            var component = GetComponent(StateComponentsLookup.Level);
            if (component != null) ReplaceComponent(StateComponentsLookup.Level, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.Level, null);
        }

        // LevelFinished
        static readonly Components.State.LevelFinished _levelFinishedComponent = new Components.State.LevelFinished();
        public bool levelFinished {
            get { return HasComponent(StateComponentsLookup.LevelFinished); }
            set {
                if (value != levelFinished) {
                    if (value) {
                        AddComponent(StateComponentsLookup.LevelFinished, _levelFinishedComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.LevelFinished);
                    }
                }
            }
        }

        public bool HasLevelFinished() {
            return HasComponent(StateComponentsLookup.LevelFinished);
        }

        public void RemoveLevelFinished() {
            RemoveComponent(StateComponentsLookup.LevelFinished);
        }

        public void PingLevelFinished() {
            var component = GetComponent(StateComponentsLookup.LevelFinished);
            if (component != null) ReplaceComponent(StateComponentsLookup.LevelFinished, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.LevelFinished, null);
        }

        // View
        static readonly Components.State.View _viewComponent = new Components.State.View();
        public bool view {
            get { return HasComponent(StateComponentsLookup.View); }
            set {
                if (value != view) {
                    if (value) {
                        AddComponent(StateComponentsLookup.View, _viewComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.View);
                    }
                }
            }
        }

        public bool HasView() {
            return HasComponent(StateComponentsLookup.View);
        }

        public void RemoveView() {
            RemoveComponent(StateComponentsLookup.View);
        }

        public void PingView() {
            var component = GetComponent(StateComponentsLookup.View);
            if (component != null) ReplaceComponent(StateComponentsLookup.View, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.View, null);
        }

        // ChannelRecording
        static readonly Components.State.ChannelRecording _channelRecordingComponent = new Components.State.ChannelRecording();
        public bool channelRecording {
            get { return HasComponent(StateComponentsLookup.ChannelRecording); }
            set {
                if (value != channelRecording) {
                    if (value) {
                        AddComponent(StateComponentsLookup.ChannelRecording, _channelRecordingComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.ChannelRecording);
                    }
                }
            }
        }

        public bool HasChannelRecording() {
            return HasComponent(StateComponentsLookup.ChannelRecording);
        }

        public void RemoveChannelRecording() {
            RemoveComponent(StateComponentsLookup.ChannelRecording);
        }

        public void PingChannelRecording() {
            var component = GetComponent(StateComponentsLookup.ChannelRecording);
            if (component != null) ReplaceComponent(StateComponentsLookup.ChannelRecording, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.ChannelRecording, null);
        }

        // ChannelVoiceActive
        static readonly Components.State.ChannelVoiceActive _channelVoiceActiveComponent = new Components.State.ChannelVoiceActive();
        public bool channelVoiceActive {
            get { return HasComponent(StateComponentsLookup.ChannelVoiceActive); }
            set {
                if (value != channelVoiceActive) {
                    if (value) {
                        AddComponent(StateComponentsLookup.ChannelVoiceActive, _channelVoiceActiveComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.ChannelVoiceActive);
                    }
                }
            }
        }

        public bool HasChannelVoiceActive() {
            return HasComponent(StateComponentsLookup.ChannelVoiceActive);
        }

        public void RemoveChannelVoiceActive() {
            RemoveComponent(StateComponentsLookup.ChannelVoiceActive);
        }

        public void PingChannelVoiceActive() {
            var component = GetComponent(StateComponentsLookup.ChannelVoiceActive);
            if (component != null) ReplaceComponent(StateComponentsLookup.ChannelVoiceActive, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.ChannelVoiceActive, null);
        }

        // ChannelFinished
        static readonly Components.State.ChannelFinished _channelFinishedComponent = new Components.State.ChannelFinished();
        public bool channelFinished {
            get { return HasComponent(StateComponentsLookup.ChannelFinished); }
            set {
                if (value != channelFinished) {
                    if (value) {
                        AddComponent(StateComponentsLookup.ChannelFinished, _channelFinishedComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.ChannelFinished);
                    }
                }
            }
        }

        public bool HasChannelFinished() {
            return HasComponent(StateComponentsLookup.ChannelFinished);
        }

        public void RemoveChannelFinished() {
            RemoveComponent(StateComponentsLookup.ChannelFinished);
        }

        public void PingChannelFinished() {
            var component = GetComponent(StateComponentsLookup.ChannelFinished);
            if (component != null) ReplaceComponent(StateComponentsLookup.ChannelFinished, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.ChannelFinished, null);
        }

        // Effect
        static readonly Components.State.Effect _effectComponent = new Components.State.Effect();
        public bool effect {
            get { return HasComponent(StateComponentsLookup.Effect); }
            set {
                if (value != effect) {
                    if (value) {
                        AddComponent(StateComponentsLookup.Effect, _effectComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.Effect);
                    }
                }
            }
        }

        public bool HasEffect() {
            return HasComponent(StateComponentsLookup.Effect);
        }

        public void RemoveEffect() {
            RemoveComponent(StateComponentsLookup.Effect);
        }

        public void PingEffect() {
            var component = GetComponent(StateComponentsLookup.Effect);
            if (component != null) ReplaceComponent(StateComponentsLookup.Effect, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.Effect, null);
        }

        //
        // Value Components
        //

        // TrashTimer
        public float _trashTimer { 
            get {
                if (!HasComponent(StateComponentsLookup.TrashTimer)) throw new System.Exception("Entity does not have component 'TrashTimer'. You can check safely with 'HasTrashTimer()'");
                return ((Components.State.TrashTimer)GetComponent(StateComponentsLookup.TrashTimer)).value;
            } 
            set {
                ((Components.State.TrashTimer)GetComponent(StateComponentsLookup.TrashTimer)).value = value;
            }
        }

        public float trashTimer { 
            get {
                if (!HasComponent(StateComponentsLookup.TrashTimer)) throw new System.Exception("Entity does not have component 'TrashTimer'. You can check safely with 'HasTrashTimer()'");
                return ((Components.State.TrashTimer)GetComponent(StateComponentsLookup.TrashTimer)).value;
            } 
            set {
                var component = CreateComponent<Components.State.TrashTimer>(StateComponentsLookup.TrashTimer);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.TrashTimer, component);
            }
        }

        public bool HasTrashTimer() {
            return HasComponent(StateComponentsLookup.TrashTimer);
        }

        public void RemoveTrashTimer() {
            if (HasComponent(StateComponentsLookup.TrashTimer)) { RemoveComponent(StateComponentsLookup.TrashTimer); }
        }

        public void PingTrashTimer() {
            var component = GetComponent(StateComponentsLookup.TrashTimer);
            if (component != null) ReplaceComponent(StateComponentsLookup.TrashTimer, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.TrashTimer, null);
        }

        // FactoryUnit
        public FS.PrefabFactory.Scripts.FactoryUnit _factoryUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.FactoryUnit)) throw new System.Exception("Entity does not have component 'FactoryUnit'. You can check safely with 'HasFactoryUnit()'");
                return ((Components.State.FactoryUnit)GetComponent(StateComponentsLookup.FactoryUnit)).value;
            } 
            set {
                ((Components.State.FactoryUnit)GetComponent(StateComponentsLookup.FactoryUnit)).value = value;
            }
        }

        public FS.PrefabFactory.Scripts.FactoryUnit factoryUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.FactoryUnit)) throw new System.Exception("Entity does not have component 'FactoryUnit'. You can check safely with 'HasFactoryUnit()'");
                return ((Components.State.FactoryUnit)GetComponent(StateComponentsLookup.FactoryUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.FactoryUnit>(StateComponentsLookup.FactoryUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.FactoryUnit, component);
            }
        }

        public bool HasFactoryUnit() {
            return HasComponent(StateComponentsLookup.FactoryUnit);
        }

        public void RemoveFactoryUnit() {
            if (HasComponent(StateComponentsLookup.FactoryUnit)) { RemoveComponent(StateComponentsLookup.FactoryUnit); }
        }

        public void PingFactoryUnit() {
            var component = GetComponent(StateComponentsLookup.FactoryUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.FactoryUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.FactoryUnit, null);
        }

        // FactoryId
        public string _factoryId { 
            get {
                if (!HasComponent(StateComponentsLookup.FactoryId)) throw new System.Exception("Entity does not have component 'FactoryId'. You can check safely with 'HasFactoryId()'");
                return ((Components.State.FactoryId)GetComponent(StateComponentsLookup.FactoryId)).value;
            } 
            set {
                ((Components.State.FactoryId)GetComponent(StateComponentsLookup.FactoryId)).value = value;
            }
        }

        public string factoryId { 
            get {
                if (!HasComponent(StateComponentsLookup.FactoryId)) throw new System.Exception("Entity does not have component 'FactoryId'. You can check safely with 'HasFactoryId()'");
                return ((Components.State.FactoryId)GetComponent(StateComponentsLookup.FactoryId)).value;
            } 
            set {
                var component = CreateComponent<Components.State.FactoryId>(StateComponentsLookup.FactoryId);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.FactoryId, component);
            }
        }

        public bool HasFactoryId() {
            return HasComponent(StateComponentsLookup.FactoryId);
        }

        public void RemoveFactoryId() {
            if (HasComponent(StateComponentsLookup.FactoryId)) { RemoveComponent(StateComponentsLookup.FactoryId); }
        }

        public void PingFactoryId() {
            var component = GetComponent(StateComponentsLookup.FactoryId);
            if (component != null) ReplaceComponent(StateComponentsLookup.FactoryId, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.FactoryId, null);
        }

        // StageManagerUnit
        public Scripts.StageManagerUnit _stageManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.StageManagerUnit)) throw new System.Exception("Entity does not have component 'StageManagerUnit'. You can check safely with 'HasStageManagerUnit()'");
                return ((Components.State.StageManagerUnit)GetComponent(StateComponentsLookup.StageManagerUnit)).value;
            } 
            set {
                ((Components.State.StageManagerUnit)GetComponent(StateComponentsLookup.StageManagerUnit)).value = value;
            }
        }

        public Scripts.StageManagerUnit stageManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.StageManagerUnit)) throw new System.Exception("Entity does not have component 'StageManagerUnit'. You can check safely with 'HasStageManagerUnit()'");
                return ((Components.State.StageManagerUnit)GetComponent(StateComponentsLookup.StageManagerUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.StageManagerUnit>(StateComponentsLookup.StageManagerUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.StageManagerUnit, component);
            }
        }

        public bool HasStageManagerUnit() {
            return HasComponent(StateComponentsLookup.StageManagerUnit);
        }

        public void RemoveStageManagerUnit() {
            if (HasComponent(StateComponentsLookup.StageManagerUnit)) { RemoveComponent(StateComponentsLookup.StageManagerUnit); }
        }

        public void PingStageManagerUnit() {
            var component = GetComponent(StateComponentsLookup.StageManagerUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.StageManagerUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.StageManagerUnit, null);
        }

        // LevelIndex
        public int _levelIndex { 
            get {
                if (!HasComponent(StateComponentsLookup.LevelIndex)) throw new System.Exception("Entity does not have component 'LevelIndex'. You can check safely with 'HasLevelIndex()'");
                return ((Components.State.LevelIndex)GetComponent(StateComponentsLookup.LevelIndex)).value;
            } 
            set {
                ((Components.State.LevelIndex)GetComponent(StateComponentsLookup.LevelIndex)).value = value;
            }
        }

        public int levelIndex { 
            get {
                if (!HasComponent(StateComponentsLookup.LevelIndex)) throw new System.Exception("Entity does not have component 'LevelIndex'. You can check safely with 'HasLevelIndex()'");
                return ((Components.State.LevelIndex)GetComponent(StateComponentsLookup.LevelIndex)).value;
            } 
            set {
                var component = CreateComponent<Components.State.LevelIndex>(StateComponentsLookup.LevelIndex);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.LevelIndex, component);
            }
        }

        public bool HasLevelIndex() {
            return HasComponent(StateComponentsLookup.LevelIndex);
        }

        public void RemoveLevelIndex() {
            if (HasComponent(StateComponentsLookup.LevelIndex)) { RemoveComponent(StateComponentsLookup.LevelIndex); }
        }

        public void PingLevelIndex() {
            var component = GetComponent(StateComponentsLookup.LevelIndex);
            if (component != null) ReplaceComponent(StateComponentsLookup.LevelIndex, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.LevelIndex, null);
        }

        // LevelControllerUnit
        public Scripts.LevelControllerUnit _levelControllerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.LevelControllerUnit)) throw new System.Exception("Entity does not have component 'LevelControllerUnit'. You can check safely with 'HasLevelControllerUnit()'");
                return ((Components.State.LevelControllerUnit)GetComponent(StateComponentsLookup.LevelControllerUnit)).value;
            } 
            set {
                ((Components.State.LevelControllerUnit)GetComponent(StateComponentsLookup.LevelControllerUnit)).value = value;
            }
        }

        public Scripts.LevelControllerUnit levelControllerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.LevelControllerUnit)) throw new System.Exception("Entity does not have component 'LevelControllerUnit'. You can check safely with 'HasLevelControllerUnit()'");
                return ((Components.State.LevelControllerUnit)GetComponent(StateComponentsLookup.LevelControllerUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.LevelControllerUnit>(StateComponentsLookup.LevelControllerUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.LevelControllerUnit, component);
            }
        }

        public bool HasLevelControllerUnit() {
            return HasComponent(StateComponentsLookup.LevelControllerUnit);
        }

        public void RemoveLevelControllerUnit() {
            if (HasComponent(StateComponentsLookup.LevelControllerUnit)) { RemoveComponent(StateComponentsLookup.LevelControllerUnit); }
        }

        public void PingLevelControllerUnit() {
            var component = GetComponent(StateComponentsLookup.LevelControllerUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.LevelControllerUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.LevelControllerUnit, null);
        }

        // LevelSubsSpeed
        public float _levelSubsSpeed { 
            get {
                if (!HasComponent(StateComponentsLookup.LevelSubsSpeed)) throw new System.Exception("Entity does not have component 'LevelSubsSpeed'. You can check safely with 'HasLevelSubsSpeed()'");
                return ((Components.State.LevelSubsSpeed)GetComponent(StateComponentsLookup.LevelSubsSpeed)).value;
            } 
            set {
                ((Components.State.LevelSubsSpeed)GetComponent(StateComponentsLookup.LevelSubsSpeed)).value = value;
            }
        }

        public float levelSubsSpeed { 
            get {
                if (!HasComponent(StateComponentsLookup.LevelSubsSpeed)) throw new System.Exception("Entity does not have component 'LevelSubsSpeed'. You can check safely with 'HasLevelSubsSpeed()'");
                return ((Components.State.LevelSubsSpeed)GetComponent(StateComponentsLookup.LevelSubsSpeed)).value;
            } 
            set {
                var component = CreateComponent<Components.State.LevelSubsSpeed>(StateComponentsLookup.LevelSubsSpeed);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.LevelSubsSpeed, component);
            }
        }

        public bool HasLevelSubsSpeed() {
            return HasComponent(StateComponentsLookup.LevelSubsSpeed);
        }

        public void RemoveLevelSubsSpeed() {
            if (HasComponent(StateComponentsLookup.LevelSubsSpeed)) { RemoveComponent(StateComponentsLookup.LevelSubsSpeed); }
        }

        public void PingLevelSubsSpeed() {
            var component = GetComponent(StateComponentsLookup.LevelSubsSpeed);
            if (component != null) ReplaceComponent(StateComponentsLookup.LevelSubsSpeed, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.LevelSubsSpeed, null);
        }

        // Uid
        public int _uid { 
            get {
                if (!HasComponent(StateComponentsLookup.Uid)) throw new System.Exception("Entity does not have component 'Uid'. You can check safely with 'HasUid()'");
                return ((Components.State.Uid)GetComponent(StateComponentsLookup.Uid)).value;
            } 
            set {
                ((Components.State.Uid)GetComponent(StateComponentsLookup.Uid)).value = value;
            }
        }

        public int uid { 
            get {
                if (!HasComponent(StateComponentsLookup.Uid)) throw new System.Exception("Entity does not have component 'Uid'. You can check safely with 'HasUid()'");
                return ((Components.State.Uid)GetComponent(StateComponentsLookup.Uid)).value;
            } 
            set {
                var component = CreateComponent<Components.State.Uid>(StateComponentsLookup.Uid);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.Uid, component);
            }
        }

        public bool HasUid() {
            return HasComponent(StateComponentsLookup.Uid);
        }

        public void RemoveUid() {
            if (HasComponent(StateComponentsLookup.Uid)) { RemoveComponent(StateComponentsLookup.Uid); }
        }

        public void PingUid() {
            var component = GetComponent(StateComponentsLookup.Uid);
            if (component != null) ReplaceComponent(StateComponentsLookup.Uid, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.Uid, null);
        }

        // UidUnit
        public FS.Uid.Scripts.UidUnit _uidUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.UidUnit)) throw new System.Exception("Entity does not have component 'UidUnit'. You can check safely with 'HasUidUnit()'");
                return ((Components.State.UidUnit)GetComponent(StateComponentsLookup.UidUnit)).value;
            } 
            set {
                ((Components.State.UidUnit)GetComponent(StateComponentsLookup.UidUnit)).value = value;
            }
        }

        public FS.Uid.Scripts.UidUnit uidUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.UidUnit)) throw new System.Exception("Entity does not have component 'UidUnit'. You can check safely with 'HasUidUnit()'");
                return ((Components.State.UidUnit)GetComponent(StateComponentsLookup.UidUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.UidUnit>(StateComponentsLookup.UidUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.UidUnit, component);
            }
        }

        public bool HasUidUnit() {
            return HasComponent(StateComponentsLookup.UidUnit);
        }

        public void RemoveUidUnit() {
            if (HasComponent(StateComponentsLookup.UidUnit)) { RemoveComponent(StateComponentsLookup.UidUnit); }
        }

        public void PingUidUnit() {
            var component = GetComponent(StateComponentsLookup.UidUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.UidUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.UidUnit, null);
        }

        // ProductUnit
        public FS.PrefabFactory.Scripts.ProductUnit _productUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.ProductUnit)) throw new System.Exception("Entity does not have component 'ProductUnit'. You can check safely with 'HasProductUnit()'");
                return ((Components.State.ProductUnit)GetComponent(StateComponentsLookup.ProductUnit)).value;
            } 
            set {
                ((Components.State.ProductUnit)GetComponent(StateComponentsLookup.ProductUnit)).value = value;
            }
        }

        public FS.PrefabFactory.Scripts.ProductUnit productUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.ProductUnit)) throw new System.Exception("Entity does not have component 'ProductUnit'. You can check safely with 'HasProductUnit()'");
                return ((Components.State.ProductUnit)GetComponent(StateComponentsLookup.ProductUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.ProductUnit>(StateComponentsLookup.ProductUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.ProductUnit, component);
            }
        }

        public bool HasProductUnit() {
            return HasComponent(StateComponentsLookup.ProductUnit);
        }

        public void RemoveProductUnit() {
            if (HasComponent(StateComponentsLookup.ProductUnit)) { RemoveComponent(StateComponentsLookup.ProductUnit); }
        }

        public void PingProductUnit() {
            var component = GetComponent(StateComponentsLookup.ProductUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.ProductUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.ProductUnit, null);
        }

        // AudioManagerUnit
        public Scripts.AudioManagerUnit _audioManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.AudioManagerUnit)) throw new System.Exception("Entity does not have component 'AudioManagerUnit'. You can check safely with 'HasAudioManagerUnit()'");
                return ((Components.State.AudioManagerUnit)GetComponent(StateComponentsLookup.AudioManagerUnit)).value;
            } 
            set {
                ((Components.State.AudioManagerUnit)GetComponent(StateComponentsLookup.AudioManagerUnit)).value = value;
            }
        }

        public Scripts.AudioManagerUnit audioManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.AudioManagerUnit)) throw new System.Exception("Entity does not have component 'AudioManagerUnit'. You can check safely with 'HasAudioManagerUnit()'");
                return ((Components.State.AudioManagerUnit)GetComponent(StateComponentsLookup.AudioManagerUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.AudioManagerUnit>(StateComponentsLookup.AudioManagerUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.AudioManagerUnit, component);
            }
        }

        public bool HasAudioManagerUnit() {
            return HasComponent(StateComponentsLookup.AudioManagerUnit);
        }

        public void RemoveAudioManagerUnit() {
            if (HasComponent(StateComponentsLookup.AudioManagerUnit)) { RemoveComponent(StateComponentsLookup.AudioManagerUnit); }
        }

        public void PingAudioManagerUnit() {
            var component = GetComponent(StateComponentsLookup.AudioManagerUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.AudioManagerUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.AudioManagerUnit, null);
        }

        // AudioEffectManagerUnit
        public Scripts.AudioEffectManagerUnit _audioEffectManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.AudioEffectManagerUnit)) throw new System.Exception("Entity does not have component 'AudioEffectManagerUnit'. You can check safely with 'HasAudioEffectManagerUnit()'");
                return ((Components.State.AudioEffectManagerUnit)GetComponent(StateComponentsLookup.AudioEffectManagerUnit)).value;
            } 
            set {
                ((Components.State.AudioEffectManagerUnit)GetComponent(StateComponentsLookup.AudioEffectManagerUnit)).value = value;
            }
        }

        public Scripts.AudioEffectManagerUnit audioEffectManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.AudioEffectManagerUnit)) throw new System.Exception("Entity does not have component 'AudioEffectManagerUnit'. You can check safely with 'HasAudioEffectManagerUnit()'");
                return ((Components.State.AudioEffectManagerUnit)GetComponent(StateComponentsLookup.AudioEffectManagerUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.AudioEffectManagerUnit>(StateComponentsLookup.AudioEffectManagerUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.AudioEffectManagerUnit, component);
            }
        }

        public bool HasAudioEffectManagerUnit() {
            return HasComponent(StateComponentsLookup.AudioEffectManagerUnit);
        }

        public void RemoveAudioEffectManagerUnit() {
            if (HasComponent(StateComponentsLookup.AudioEffectManagerUnit)) { RemoveComponent(StateComponentsLookup.AudioEffectManagerUnit); }
        }

        public void PingAudioEffectManagerUnit() {
            var component = GetComponent(StateComponentsLookup.AudioEffectManagerUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.AudioEffectManagerUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.AudioEffectManagerUnit, null);
        }

        // AudioEffectUnit
        public Scripts.AudioEffectUnit _audioEffectUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.AudioEffectUnit)) throw new System.Exception("Entity does not have component 'AudioEffectUnit'. You can check safely with 'HasAudioEffectUnit()'");
                return ((Components.State.AudioEffectUnit)GetComponent(StateComponentsLookup.AudioEffectUnit)).value;
            } 
            set {
                ((Components.State.AudioEffectUnit)GetComponent(StateComponentsLookup.AudioEffectUnit)).value = value;
            }
        }

        public Scripts.AudioEffectUnit audioEffectUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.AudioEffectUnit)) throw new System.Exception("Entity does not have component 'AudioEffectUnit'. You can check safely with 'HasAudioEffectUnit()'");
                return ((Components.State.AudioEffectUnit)GetComponent(StateComponentsLookup.AudioEffectUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.AudioEffectUnit>(StateComponentsLookup.AudioEffectUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.AudioEffectUnit, component);
            }
        }

        public bool HasAudioEffectUnit() {
            return HasComponent(StateComponentsLookup.AudioEffectUnit);
        }

        public void RemoveAudioEffectUnit() {
            if (HasComponent(StateComponentsLookup.AudioEffectUnit)) { RemoveComponent(StateComponentsLookup.AudioEffectUnit); }
        }

        public void PingAudioEffectUnit() {
            var component = GetComponent(StateComponentsLookup.AudioEffectUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.AudioEffectUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.AudioEffectUnit, null);
        }

        // AudioEffectProductUnit
        public Scripts.AudioEffectProductUnit _audioEffectProductUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.AudioEffectProductUnit)) throw new System.Exception("Entity does not have component 'AudioEffectProductUnit'. You can check safely with 'HasAudioEffectProductUnit()'");
                return ((Components.State.AudioEffectProductUnit)GetComponent(StateComponentsLookup.AudioEffectProductUnit)).value;
            } 
            set {
                ((Components.State.AudioEffectProductUnit)GetComponent(StateComponentsLookup.AudioEffectProductUnit)).value = value;
            }
        }

        public Scripts.AudioEffectProductUnit audioEffectProductUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.AudioEffectProductUnit)) throw new System.Exception("Entity does not have component 'AudioEffectProductUnit'. You can check safely with 'HasAudioEffectProductUnit()'");
                return ((Components.State.AudioEffectProductUnit)GetComponent(StateComponentsLookup.AudioEffectProductUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.AudioEffectProductUnit>(StateComponentsLookup.AudioEffectProductUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.AudioEffectProductUnit, component);
            }
        }

        public bool HasAudioEffectProductUnit() {
            return HasComponent(StateComponentsLookup.AudioEffectProductUnit);
        }

        public void RemoveAudioEffectProductUnit() {
            if (HasComponent(StateComponentsLookup.AudioEffectProductUnit)) { RemoveComponent(StateComponentsLookup.AudioEffectProductUnit); }
        }

        public void PingAudioEffectProductUnit() {
            var component = GetComponent(StateComponentsLookup.AudioEffectProductUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.AudioEffectProductUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.AudioEffectProductUnit, null);
        }

        // MusicManagerUnit
        public Scripts.MusicManagerUnit _musicManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.MusicManagerUnit)) throw new System.Exception("Entity does not have component 'MusicManagerUnit'. You can check safely with 'HasMusicManagerUnit()'");
                return ((Components.State.MusicManagerUnit)GetComponent(StateComponentsLookup.MusicManagerUnit)).value;
            } 
            set {
                ((Components.State.MusicManagerUnit)GetComponent(StateComponentsLookup.MusicManagerUnit)).value = value;
            }
        }

        public Scripts.MusicManagerUnit musicManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.MusicManagerUnit)) throw new System.Exception("Entity does not have component 'MusicManagerUnit'. You can check safely with 'HasMusicManagerUnit()'");
                return ((Components.State.MusicManagerUnit)GetComponent(StateComponentsLookup.MusicManagerUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.MusicManagerUnit>(StateComponentsLookup.MusicManagerUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.MusicManagerUnit, component);
            }
        }

        public bool HasMusicManagerUnit() {
            return HasComponent(StateComponentsLookup.MusicManagerUnit);
        }

        public void RemoveMusicManagerUnit() {
            if (HasComponent(StateComponentsLookup.MusicManagerUnit)) { RemoveComponent(StateComponentsLookup.MusicManagerUnit); }
        }

        public void PingMusicManagerUnit() {
            var component = GetComponent(StateComponentsLookup.MusicManagerUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.MusicManagerUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.MusicManagerUnit, null);
        }

        // SubsManagerUnit
        public Scripts.SubsManagerUnit _subsManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.SubsManagerUnit)) throw new System.Exception("Entity does not have component 'SubsManagerUnit'. You can check safely with 'HasSubsManagerUnit()'");
                return ((Components.State.SubsManagerUnit)GetComponent(StateComponentsLookup.SubsManagerUnit)).value;
            } 
            set {
                ((Components.State.SubsManagerUnit)GetComponent(StateComponentsLookup.SubsManagerUnit)).value = value;
            }
        }

        public Scripts.SubsManagerUnit subsManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.SubsManagerUnit)) throw new System.Exception("Entity does not have component 'SubsManagerUnit'. You can check safely with 'HasSubsManagerUnit()'");
                return ((Components.State.SubsManagerUnit)GetComponent(StateComponentsLookup.SubsManagerUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.SubsManagerUnit>(StateComponentsLookup.SubsManagerUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.SubsManagerUnit, component);
            }
        }

        public bool HasSubsManagerUnit() {
            return HasComponent(StateComponentsLookup.SubsManagerUnit);
        }

        public void RemoveSubsManagerUnit() {
            if (HasComponent(StateComponentsLookup.SubsManagerUnit)) { RemoveComponent(StateComponentsLookup.SubsManagerUnit); }
        }

        public void PingSubsManagerUnit() {
            var component = GetComponent(StateComponentsLookup.SubsManagerUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.SubsManagerUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.SubsManagerUnit, null);
        }

        // Channel
        public int _channel { 
            get {
                if (!HasComponent(StateComponentsLookup.Channel)) throw new System.Exception("Entity does not have component 'Channel'. You can check safely with 'HasChannel()'");
                return ((Components.State.Channel)GetComponent(StateComponentsLookup.Channel)).value;
            } 
            set {
                ((Components.State.Channel)GetComponent(StateComponentsLookup.Channel)).value = value;
            }
        }

        public int channel { 
            get {
                if (!HasComponent(StateComponentsLookup.Channel)) throw new System.Exception("Entity does not have component 'Channel'. You can check safely with 'HasChannel()'");
                return ((Components.State.Channel)GetComponent(StateComponentsLookup.Channel)).value;
            } 
            set {
                var component = CreateComponent<Components.State.Channel>(StateComponentsLookup.Channel);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.Channel, component);
            }
        }

        public bool HasChannel() {
            return HasComponent(StateComponentsLookup.Channel);
        }

        public void RemoveChannel() {
            if (HasComponent(StateComponentsLookup.Channel)) { RemoveComponent(StateComponentsLookup.Channel); }
        }

        public void PingChannel() {
            var component = GetComponent(StateComponentsLookup.Channel);
            if (component != null) ReplaceComponent(StateComponentsLookup.Channel, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.Channel, null);
        }

        // ChannelInfoUnit
        public Scripts.ChannelInfoUnit _channelInfoUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.ChannelInfoUnit)) throw new System.Exception("Entity does not have component 'ChannelInfoUnit'. You can check safely with 'HasChannelInfoUnit()'");
                return ((Components.State.ChannelInfoUnit)GetComponent(StateComponentsLookup.ChannelInfoUnit)).value;
            } 
            set {
                ((Components.State.ChannelInfoUnit)GetComponent(StateComponentsLookup.ChannelInfoUnit)).value = value;
            }
        }

        public Scripts.ChannelInfoUnit channelInfoUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.ChannelInfoUnit)) throw new System.Exception("Entity does not have component 'ChannelInfoUnit'. You can check safely with 'HasChannelInfoUnit()'");
                return ((Components.State.ChannelInfoUnit)GetComponent(StateComponentsLookup.ChannelInfoUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.ChannelInfoUnit>(StateComponentsLookup.ChannelInfoUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.ChannelInfoUnit, component);
            }
        }

        public bool HasChannelInfoUnit() {
            return HasComponent(StateComponentsLookup.ChannelInfoUnit);
        }

        public void RemoveChannelInfoUnit() {
            if (HasComponent(StateComponentsLookup.ChannelInfoUnit)) { RemoveComponent(StateComponentsLookup.ChannelInfoUnit); }
        }

        public void PingChannelInfoUnit() {
            var component = GetComponent(StateComponentsLookup.ChannelInfoUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.ChannelInfoUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.ChannelInfoUnit, null);
        }

        // PhoneChannelUnit
        public Scripts.PhoneChannelUnit _phoneChannelUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.PhoneChannelUnit)) throw new System.Exception("Entity does not have component 'PhoneChannelUnit'. You can check safely with 'HasPhoneChannelUnit()'");
                return ((Components.State.PhoneChannelUnit)GetComponent(StateComponentsLookup.PhoneChannelUnit)).value;
            } 
            set {
                ((Components.State.PhoneChannelUnit)GetComponent(StateComponentsLookup.PhoneChannelUnit)).value = value;
            }
        }

        public Scripts.PhoneChannelUnit phoneChannelUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.PhoneChannelUnit)) throw new System.Exception("Entity does not have component 'PhoneChannelUnit'. You can check safely with 'HasPhoneChannelUnit()'");
                return ((Components.State.PhoneChannelUnit)GetComponent(StateComponentsLookup.PhoneChannelUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.PhoneChannelUnit>(StateComponentsLookup.PhoneChannelUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.PhoneChannelUnit, component);
            }
        }

        public bool HasPhoneChannelUnit() {
            return HasComponent(StateComponentsLookup.PhoneChannelUnit);
        }

        public void RemovePhoneChannelUnit() {
            if (HasComponent(StateComponentsLookup.PhoneChannelUnit)) { RemoveComponent(StateComponentsLookup.PhoneChannelUnit); }
        }

        public void PingPhoneChannelUnit() {
            var component = GetComponent(StateComponentsLookup.PhoneChannelUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.PhoneChannelUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.PhoneChannelUnit, null);
        }

        // PhoneManagerUnit
        public Scripts.PhoneManagerUnit _phoneManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.PhoneManagerUnit)) throw new System.Exception("Entity does not have component 'PhoneManagerUnit'. You can check safely with 'HasPhoneManagerUnit()'");
                return ((Components.State.PhoneManagerUnit)GetComponent(StateComponentsLookup.PhoneManagerUnit)).value;
            } 
            set {
                ((Components.State.PhoneManagerUnit)GetComponent(StateComponentsLookup.PhoneManagerUnit)).value = value;
            }
        }

        public Scripts.PhoneManagerUnit phoneManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.PhoneManagerUnit)) throw new System.Exception("Entity does not have component 'PhoneManagerUnit'. You can check safely with 'HasPhoneManagerUnit()'");
                return ((Components.State.PhoneManagerUnit)GetComponent(StateComponentsLookup.PhoneManagerUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.PhoneManagerUnit>(StateComponentsLookup.PhoneManagerUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.PhoneManagerUnit, component);
            }
        }

        public bool HasPhoneManagerUnit() {
            return HasComponent(StateComponentsLookup.PhoneManagerUnit);
        }

        public void RemovePhoneManagerUnit() {
            if (HasComponent(StateComponentsLookup.PhoneManagerUnit)) { RemoveComponent(StateComponentsLookup.PhoneManagerUnit); }
        }

        public void PingPhoneManagerUnit() {
            var component = GetComponent(StateComponentsLookup.PhoneManagerUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.PhoneManagerUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.PhoneManagerUnit, null);
        }

        // WorldTime
        public float _worldTime { 
            get {
                if (!HasComponent(StateComponentsLookup.WorldTime)) throw new System.Exception("Entity does not have component 'WorldTime'. You can check safely with 'HasWorldTime()'");
                return ((Components.State.WorldTime)GetComponent(StateComponentsLookup.WorldTime)).value;
            } 
            set {
                ((Components.State.WorldTime)GetComponent(StateComponentsLookup.WorldTime)).value = value;
            }
        }

        public float worldTime { 
            get {
                if (!HasComponent(StateComponentsLookup.WorldTime)) throw new System.Exception("Entity does not have component 'WorldTime'. You can check safely with 'HasWorldTime()'");
                return ((Components.State.WorldTime)GetComponent(StateComponentsLookup.WorldTime)).value;
            } 
            set {
                var component = CreateComponent<Components.State.WorldTime>(StateComponentsLookup.WorldTime);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.WorldTime, component);
            }
        }

        public bool HasWorldTime() {
            return HasComponent(StateComponentsLookup.WorldTime);
        }

        public void RemoveWorldTime() {
            if (HasComponent(StateComponentsLookup.WorldTime)) { RemoveComponent(StateComponentsLookup.WorldTime); }
        }

        public void PingWorldTime() {
            var component = GetComponent(StateComponentsLookup.WorldTime);
            if (component != null) ReplaceComponent(StateComponentsLookup.WorldTime, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.WorldTime, null);
        }

        // WorldTimeSpeed
        public float _worldTimeSpeed { 
            get {
                if (!HasComponent(StateComponentsLookup.WorldTimeSpeed)) throw new System.Exception("Entity does not have component 'WorldTimeSpeed'. You can check safely with 'HasWorldTimeSpeed()'");
                return ((Components.State.WorldTimeSpeed)GetComponent(StateComponentsLookup.WorldTimeSpeed)).value;
            } 
            set {
                ((Components.State.WorldTimeSpeed)GetComponent(StateComponentsLookup.WorldTimeSpeed)).value = value;
            }
        }

        public float worldTimeSpeed { 
            get {
                if (!HasComponent(StateComponentsLookup.WorldTimeSpeed)) throw new System.Exception("Entity does not have component 'WorldTimeSpeed'. You can check safely with 'HasWorldTimeSpeed()'");
                return ((Components.State.WorldTimeSpeed)GetComponent(StateComponentsLookup.WorldTimeSpeed)).value;
            } 
            set {
                var component = CreateComponent<Components.State.WorldTimeSpeed>(StateComponentsLookup.WorldTimeSpeed);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.WorldTimeSpeed, component);
            }
        }

        public bool HasWorldTimeSpeed() {
            return HasComponent(StateComponentsLookup.WorldTimeSpeed);
        }

        public void RemoveWorldTimeSpeed() {
            if (HasComponent(StateComponentsLookup.WorldTimeSpeed)) { RemoveComponent(StateComponentsLookup.WorldTimeSpeed); }
        }

        public void PingWorldTimeSpeed() {
            var component = GetComponent(StateComponentsLookup.WorldTimeSpeed);
            if (component != null) ReplaceComponent(StateComponentsLookup.WorldTimeSpeed, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.WorldTimeSpeed, null);
        }

        // EffectId
        public string _effectId { 
            get {
                if (!HasComponent(StateComponentsLookup.EffectId)) throw new System.Exception("Entity does not have component 'EffectId'. You can check safely with 'HasEffectId()'");
                return ((Components.State.EffectId)GetComponent(StateComponentsLookup.EffectId)).value;
            } 
            set {
                ((Components.State.EffectId)GetComponent(StateComponentsLookup.EffectId)).value = value;
            }
        }

        public string effectId { 
            get {
                if (!HasComponent(StateComponentsLookup.EffectId)) throw new System.Exception("Entity does not have component 'EffectId'. You can check safely with 'HasEffectId()'");
                return ((Components.State.EffectId)GetComponent(StateComponentsLookup.EffectId)).value;
            } 
            set {
                var component = CreateComponent<Components.State.EffectId>(StateComponentsLookup.EffectId);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.EffectId, component);
            }
        }

        public bool HasEffectId() {
            return HasComponent(StateComponentsLookup.EffectId);
        }

        public void RemoveEffectId() {
            if (HasComponent(StateComponentsLookup.EffectId)) { RemoveComponent(StateComponentsLookup.EffectId); }
        }

        public void PingEffectId() {
            var component = GetComponent(StateComponentsLookup.EffectId);
            if (component != null) ReplaceComponent(StateComponentsLookup.EffectId, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.EffectId, null);
        }

        // EffectFactoryUnit
        public Scripts.EffectFactoryUnit _effectFactoryUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.EffectFactoryUnit)) throw new System.Exception("Entity does not have component 'EffectFactoryUnit'. You can check safely with 'HasEffectFactoryUnit()'");
                return ((Components.State.EffectFactoryUnit)GetComponent(StateComponentsLookup.EffectFactoryUnit)).value;
            } 
            set {
                ((Components.State.EffectFactoryUnit)GetComponent(StateComponentsLookup.EffectFactoryUnit)).value = value;
            }
        }

        public Scripts.EffectFactoryUnit effectFactoryUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.EffectFactoryUnit)) throw new System.Exception("Entity does not have component 'EffectFactoryUnit'. You can check safely with 'HasEffectFactoryUnit()'");
                return ((Components.State.EffectFactoryUnit)GetComponent(StateComponentsLookup.EffectFactoryUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.EffectFactoryUnit>(StateComponentsLookup.EffectFactoryUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.EffectFactoryUnit, component);
            }
        }

        public bool HasEffectFactoryUnit() {
            return HasComponent(StateComponentsLookup.EffectFactoryUnit);
        }

        public void RemoveEffectFactoryUnit() {
            if (HasComponent(StateComponentsLookup.EffectFactoryUnit)) { RemoveComponent(StateComponentsLookup.EffectFactoryUnit); }
        }

        public void PingEffectFactoryUnit() {
            var component = GetComponent(StateComponentsLookup.EffectFactoryUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.EffectFactoryUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.EffectFactoryUnit, null);
        }

        // ConfigId
        public string _configId { 
            get {
                if (!HasComponent(StateComponentsLookup.ConfigId)) throw new System.Exception("Entity does not have component 'ConfigId'. You can check safely with 'HasConfigId()'");
                return ((Components.State.ConfigId)GetComponent(StateComponentsLookup.ConfigId)).value;
            } 
            set {
                ((Components.State.ConfigId)GetComponent(StateComponentsLookup.ConfigId)).value = value;
            }
        }

        public string configId { 
            get {
                if (!HasComponent(StateComponentsLookup.ConfigId)) throw new System.Exception("Entity does not have component 'ConfigId'. You can check safely with 'HasConfigId()'");
                return ((Components.State.ConfigId)GetComponent(StateComponentsLookup.ConfigId)).value;
            } 
            set {
                var component = CreateComponent<Components.State.ConfigId>(StateComponentsLookup.ConfigId);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.ConfigId, component);
            }
        }

        public bool HasConfigId() {
            return HasComponent(StateComponentsLookup.ConfigId);
        }

        public void RemoveConfigId() {
            if (HasComponent(StateComponentsLookup.ConfigId)) { RemoveComponent(StateComponentsLookup.ConfigId); }
        }

        public void PingConfigId() {
            var component = GetComponent(StateComponentsLookup.ConfigId);
            if (component != null) ReplaceComponent(StateComponentsLookup.ConfigId, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.ConfigId, null);
        }

        // PositionWorld
        public UnityEngine.Vector2 _positionWorld { 
            get {
                if (!HasComponent(StateComponentsLookup.PositionWorld)) throw new System.Exception("Entity does not have component 'PositionWorld'. You can check safely with 'HasPositionWorld()'");
                return ((Components.State.PositionWorld)GetComponent(StateComponentsLookup.PositionWorld)).value;
            } 
            set {
                ((Components.State.PositionWorld)GetComponent(StateComponentsLookup.PositionWorld)).value = value;
            }
        }

        public UnityEngine.Vector2 positionWorld { 
            get {
                if (!HasComponent(StateComponentsLookup.PositionWorld)) throw new System.Exception("Entity does not have component 'PositionWorld'. You can check safely with 'HasPositionWorld()'");
                return ((Components.State.PositionWorld)GetComponent(StateComponentsLookup.PositionWorld)).value;
            } 
            set {
                var component = CreateComponent<Components.State.PositionWorld>(StateComponentsLookup.PositionWorld);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.PositionWorld, component);
            }
        }

        public bool HasPositionWorld() {
            return HasComponent(StateComponentsLookup.PositionWorld);
        }

        public void RemovePositionWorld() {
            if (HasComponent(StateComponentsLookup.PositionWorld)) { RemoveComponent(StateComponentsLookup.PositionWorld); }
        }

        public void PingPositionWorld() {
            var component = GetComponent(StateComponentsLookup.PositionWorld);
            if (component != null) ReplaceComponent(StateComponentsLookup.PositionWorld, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.PositionWorld, null);
        }

        // MenuButtonUnit
        public Scripts.MenuButtonUnit _menuButtonUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.MenuButtonUnit)) throw new System.Exception("Entity does not have component 'MenuButtonUnit'. You can check safely with 'HasMenuButtonUnit()'");
                return ((Components.State.MenuButtonUnit)GetComponent(StateComponentsLookup.MenuButtonUnit)).value;
            } 
            set {
                ((Components.State.MenuButtonUnit)GetComponent(StateComponentsLookup.MenuButtonUnit)).value = value;
            }
        }

        public Scripts.MenuButtonUnit menuButtonUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.MenuButtonUnit)) throw new System.Exception("Entity does not have component 'MenuButtonUnit'. You can check safely with 'HasMenuButtonUnit()'");
                return ((Components.State.MenuButtonUnit)GetComponent(StateComponentsLookup.MenuButtonUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.MenuButtonUnit>(StateComponentsLookup.MenuButtonUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.MenuButtonUnit, component);
            }
        }

        public bool HasMenuButtonUnit() {
            return HasComponent(StateComponentsLookup.MenuButtonUnit);
        }

        public void RemoveMenuButtonUnit() {
            if (HasComponent(StateComponentsLookup.MenuButtonUnit)) { RemoveComponent(StateComponentsLookup.MenuButtonUnit); }
        }

        public void PingMenuButtonUnit() {
            var component = GetComponent(StateComponentsLookup.MenuButtonUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.MenuButtonUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.MenuButtonUnit, null);
        }

        // MenuButtonId
        public string _menuButtonId { 
            get {
                if (!HasComponent(StateComponentsLookup.MenuButtonId)) throw new System.Exception("Entity does not have component 'MenuButtonId'. You can check safely with 'HasMenuButtonId()'");
                return ((Components.State.MenuButtonId)GetComponent(StateComponentsLookup.MenuButtonId)).value;
            } 
            set {
                ((Components.State.MenuButtonId)GetComponent(StateComponentsLookup.MenuButtonId)).value = value;
            }
        }

        public string menuButtonId { 
            get {
                if (!HasComponent(StateComponentsLookup.MenuButtonId)) throw new System.Exception("Entity does not have component 'MenuButtonId'. You can check safely with 'HasMenuButtonId()'");
                return ((Components.State.MenuButtonId)GetComponent(StateComponentsLookup.MenuButtonId)).value;
            } 
            set {
                var component = CreateComponent<Components.State.MenuButtonId>(StateComponentsLookup.MenuButtonId);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.MenuButtonId, component);
            }
        }

        public bool HasMenuButtonId() {
            return HasComponent(StateComponentsLookup.MenuButtonId);
        }

        public void RemoveMenuButtonId() {
            if (HasComponent(StateComponentsLookup.MenuButtonId)) { RemoveComponent(StateComponentsLookup.MenuButtonId); }
        }

        public void PingMenuButtonId() {
            var component = GetComponent(StateComponentsLookup.MenuButtonId);
            if (component != null) ReplaceComponent(StateComponentsLookup.MenuButtonId, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.MenuButtonId, null);
        }

        // LightUnit
        public Scripts.LightUnit _lightUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.LightUnit)) throw new System.Exception("Entity does not have component 'LightUnit'. You can check safely with 'HasLightUnit()'");
                return ((Components.State.LightUnit)GetComponent(StateComponentsLookup.LightUnit)).value;
            } 
            set {
                ((Components.State.LightUnit)GetComponent(StateComponentsLookup.LightUnit)).value = value;
            }
        }

        public Scripts.LightUnit lightUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.LightUnit)) throw new System.Exception("Entity does not have component 'LightUnit'. You can check safely with 'HasLightUnit()'");
                return ((Components.State.LightUnit)GetComponent(StateComponentsLookup.LightUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.LightUnit>(StateComponentsLookup.LightUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.LightUnit, component);
            }
        }

        public bool HasLightUnit() {
            return HasComponent(StateComponentsLookup.LightUnit);
        }

        public void RemoveLightUnit() {
            if (HasComponent(StateComponentsLookup.LightUnit)) { RemoveComponent(StateComponentsLookup.LightUnit); }
        }

        public void PingLightUnit() {
            var component = GetComponent(StateComponentsLookup.LightUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.LightUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.LightUnit, null);
        }

        // LigthId
        public string _ligthId { 
            get {
                if (!HasComponent(StateComponentsLookup.LigthId)) throw new System.Exception("Entity does not have component 'LigthId'. You can check safely with 'HasLigthId()'");
                return ((Components.State.LigthId)GetComponent(StateComponentsLookup.LigthId)).value;
            } 
            set {
                ((Components.State.LigthId)GetComponent(StateComponentsLookup.LigthId)).value = value;
            }
        }

        public string ligthId { 
            get {
                if (!HasComponent(StateComponentsLookup.LigthId)) throw new System.Exception("Entity does not have component 'LigthId'. You can check safely with 'HasLigthId()'");
                return ((Components.State.LigthId)GetComponent(StateComponentsLookup.LigthId)).value;
            } 
            set {
                var component = CreateComponent<Components.State.LigthId>(StateComponentsLookup.LigthId);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.LigthId, component);
            }
        }

        public bool HasLigthId() {
            return HasComponent(StateComponentsLookup.LigthId);
        }

        public void RemoveLigthId() {
            if (HasComponent(StateComponentsLookup.LigthId)) { RemoveComponent(StateComponentsLookup.LigthId); }
        }

        public void PingLigthId() {
            var component = GetComponent(StateComponentsLookup.LigthId);
            if (component != null) ReplaceComponent(StateComponentsLookup.LigthId, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.LigthId, null);
        }

        // ModalUnit
        public Scripts.ModalUnit _modalUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.ModalUnit)) throw new System.Exception("Entity does not have component 'ModalUnit'. You can check safely with 'HasModalUnit()'");
                return ((Components.State.ModalUnit)GetComponent(StateComponentsLookup.ModalUnit)).value;
            } 
            set {
                ((Components.State.ModalUnit)GetComponent(StateComponentsLookup.ModalUnit)).value = value;
            }
        }

        public Scripts.ModalUnit modalUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.ModalUnit)) throw new System.Exception("Entity does not have component 'ModalUnit'. You can check safely with 'HasModalUnit()'");
                return ((Components.State.ModalUnit)GetComponent(StateComponentsLookup.ModalUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.ModalUnit>(StateComponentsLookup.ModalUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.ModalUnit, component);
            }
        }

        public bool HasModalUnit() {
            return HasComponent(StateComponentsLookup.ModalUnit);
        }

        public void RemoveModalUnit() {
            if (HasComponent(StateComponentsLookup.ModalUnit)) { RemoveComponent(StateComponentsLookup.ModalUnit); }
        }

        public void PingModalUnit() {
            var component = GetComponent(StateComponentsLookup.ModalUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.ModalUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.ModalUnit, null);
        }

        // ModalId
        public string _modalId { 
            get {
                if (!HasComponent(StateComponentsLookup.ModalId)) throw new System.Exception("Entity does not have component 'ModalId'. You can check safely with 'HasModalId()'");
                return ((Components.State.ModalId)GetComponent(StateComponentsLookup.ModalId)).value;
            } 
            set {
                ((Components.State.ModalId)GetComponent(StateComponentsLookup.ModalId)).value = value;
            }
        }

        public string modalId { 
            get {
                if (!HasComponent(StateComponentsLookup.ModalId)) throw new System.Exception("Entity does not have component 'ModalId'. You can check safely with 'HasModalId()'");
                return ((Components.State.ModalId)GetComponent(StateComponentsLookup.ModalId)).value;
            } 
            set {
                var component = CreateComponent<Components.State.ModalId>(StateComponentsLookup.ModalId);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.ModalId, component);
            }
        }

        public bool HasModalId() {
            return HasComponent(StateComponentsLookup.ModalId);
        }

        public void RemoveModalId() {
            if (HasComponent(StateComponentsLookup.ModalId)) { RemoveComponent(StateComponentsLookup.ModalId); }
        }

        public void PingModalId() {
            var component = GetComponent(StateComponentsLookup.ModalId);
            if (component != null) ReplaceComponent(StateComponentsLookup.ModalId, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.ModalId, null);
        }

        // OverlayUnit
        public Scripts.OverlayUnit _overlayUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.OverlayUnit)) throw new System.Exception("Entity does not have component 'OverlayUnit'. You can check safely with 'HasOverlayUnit()'");
                return ((Components.State.OverlayUnit)GetComponent(StateComponentsLookup.OverlayUnit)).value;
            } 
            set {
                ((Components.State.OverlayUnit)GetComponent(StateComponentsLookup.OverlayUnit)).value = value;
            }
        }

        public Scripts.OverlayUnit overlayUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.OverlayUnit)) throw new System.Exception("Entity does not have component 'OverlayUnit'. You can check safely with 'HasOverlayUnit()'");
                return ((Components.State.OverlayUnit)GetComponent(StateComponentsLookup.OverlayUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.OverlayUnit>(StateComponentsLookup.OverlayUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.OverlayUnit, component);
            }
        }

        public bool HasOverlayUnit() {
            return HasComponent(StateComponentsLookup.OverlayUnit);
        }

        public void RemoveOverlayUnit() {
            if (HasComponent(StateComponentsLookup.OverlayUnit)) { RemoveComponent(StateComponentsLookup.OverlayUnit); }
        }

        public void PingOverlayUnit() {
            var component = GetComponent(StateComponentsLookup.OverlayUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.OverlayUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.OverlayUnit, null);
        }

        // StickUnit
        public Scripts.StickUnit _stickUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.StickUnit)) throw new System.Exception("Entity does not have component 'StickUnit'. You can check safely with 'HasStickUnit()'");
                return ((Components.State.StickUnit)GetComponent(StateComponentsLookup.StickUnit)).value;
            } 
            set {
                ((Components.State.StickUnit)GetComponent(StateComponentsLookup.StickUnit)).value = value;
            }
        }

        public Scripts.StickUnit stickUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.StickUnit)) throw new System.Exception("Entity does not have component 'StickUnit'. You can check safely with 'HasStickUnit()'");
                return ((Components.State.StickUnit)GetComponent(StateComponentsLookup.StickUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.StickUnit>(StateComponentsLookup.StickUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.StickUnit, component);
            }
        }

        public bool HasStickUnit() {
            return HasComponent(StateComponentsLookup.StickUnit);
        }

        public void RemoveStickUnit() {
            if (HasComponent(StateComponentsLookup.StickUnit)) { RemoveComponent(StateComponentsLookup.StickUnit); }
        }

        public void PingStickUnit() {
            var component = GetComponent(StateComponentsLookup.StickUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.StickUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.StickUnit, null);
        }

        // CharacterUnit
        public Scripts.CharacterUnit _characterUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.CharacterUnit)) throw new System.Exception("Entity does not have component 'CharacterUnit'. You can check safely with 'HasCharacterUnit()'");
                return ((Components.State.CharacterUnit)GetComponent(StateComponentsLookup.CharacterUnit)).value;
            } 
            set {
                ((Components.State.CharacterUnit)GetComponent(StateComponentsLookup.CharacterUnit)).value = value;
            }
        }

        public Scripts.CharacterUnit characterUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.CharacterUnit)) throw new System.Exception("Entity does not have component 'CharacterUnit'. You can check safely with 'HasCharacterUnit()'");
                return ((Components.State.CharacterUnit)GetComponent(StateComponentsLookup.CharacterUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.CharacterUnit>(StateComponentsLookup.CharacterUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.CharacterUnit, component);
            }
        }

        public bool HasCharacterUnit() {
            return HasComponent(StateComponentsLookup.CharacterUnit);
        }

        public void RemoveCharacterUnit() {
            if (HasComponent(StateComponentsLookup.CharacterUnit)) { RemoveComponent(StateComponentsLookup.CharacterUnit); }
        }

        public void PingCharacterUnit() {
            var component = GetComponent(StateComponentsLookup.CharacterUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.CharacterUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.CharacterUnit, null);
        }

        // HudUnit
        public Scripts.HudUnit _hudUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.HudUnit)) throw new System.Exception("Entity does not have component 'HudUnit'. You can check safely with 'HasHudUnit()'");
                return ((Components.State.HudUnit)GetComponent(StateComponentsLookup.HudUnit)).value;
            } 
            set {
                ((Components.State.HudUnit)GetComponent(StateComponentsLookup.HudUnit)).value = value;
            }
        }

        public Scripts.HudUnit hudUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.HudUnit)) throw new System.Exception("Entity does not have component 'HudUnit'. You can check safely with 'HasHudUnit()'");
                return ((Components.State.HudUnit)GetComponent(StateComponentsLookup.HudUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.HudUnit>(StateComponentsLookup.HudUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.HudUnit, component);
            }
        }

        public bool HasHudUnit() {
            return HasComponent(StateComponentsLookup.HudUnit);
        }

        public void RemoveHudUnit() {
            if (HasComponent(StateComponentsLookup.HudUnit)) { RemoveComponent(StateComponentsLookup.HudUnit); }
        }

        public void PingHudUnit() {
            var component = GetComponent(StateComponentsLookup.HudUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.HudUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.HudUnit, null);
        }

        // TicketManagerUnit
        public Scripts.TicketManagerUnit _ticketManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.TicketManagerUnit)) throw new System.Exception("Entity does not have component 'TicketManagerUnit'. You can check safely with 'HasTicketManagerUnit()'");
                return ((Components.State.TicketManagerUnit)GetComponent(StateComponentsLookup.TicketManagerUnit)).value;
            } 
            set {
                ((Components.State.TicketManagerUnit)GetComponent(StateComponentsLookup.TicketManagerUnit)).value = value;
            }
        }

        public Scripts.TicketManagerUnit ticketManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.TicketManagerUnit)) throw new System.Exception("Entity does not have component 'TicketManagerUnit'. You can check safely with 'HasTicketManagerUnit()'");
                return ((Components.State.TicketManagerUnit)GetComponent(StateComponentsLookup.TicketManagerUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.TicketManagerUnit>(StateComponentsLookup.TicketManagerUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.TicketManagerUnit, component);
            }
        }

        public bool HasTicketManagerUnit() {
            return HasComponent(StateComponentsLookup.TicketManagerUnit);
        }

        public void RemoveTicketManagerUnit() {
            if (HasComponent(StateComponentsLookup.TicketManagerUnit)) { RemoveComponent(StateComponentsLookup.TicketManagerUnit); }
        }

        public void PingTicketManagerUnit() {
            var component = GetComponent(StateComponentsLookup.TicketManagerUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.TicketManagerUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.TicketManagerUnit, null);
        }

        // Score
        public int _score { 
            get {
                if (!HasComponent(StateComponentsLookup.Score)) throw new System.Exception("Entity does not have component 'Score'. You can check safely with 'HasScore()'");
                return ((Components.State.Score)GetComponent(StateComponentsLookup.Score)).value;
            } 
            set {
                ((Components.State.Score)GetComponent(StateComponentsLookup.Score)).value = value;
            }
        }

        public int score { 
            get {
                if (!HasComponent(StateComponentsLookup.Score)) throw new System.Exception("Entity does not have component 'Score'. You can check safely with 'HasScore()'");
                return ((Components.State.Score)GetComponent(StateComponentsLookup.Score)).value;
            } 
            set {
                var component = CreateComponent<Components.State.Score>(StateComponentsLookup.Score);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.Score, component);
            }
        }

        public bool HasScore() {
            return HasComponent(StateComponentsLookup.Score);
        }

        public void RemoveScore() {
            if (HasComponent(StateComponentsLookup.Score)) { RemoveComponent(StateComponentsLookup.Score); }
        }

        public void PingScore() {
            var component = GetComponent(StateComponentsLookup.Score);
            if (component != null) ReplaceComponent(StateComponentsLookup.Score, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.Score, null);
        }
    }

}
