// <auto-generated>
//     This code was generated with love by Gentitas.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using UnityEngine;
using System.Collections.Generic;

namespace DZ.Core {
    public sealed partial class StateEntity: Entitas.Entity, Entitas.IEntity {
        public StateEntity AddComponentByName(string name) {
            var componentIndex = StateComponentsLookup.GetComponentIndex(name);
            if (componentIndex == -1) throw new System.Exception("There is no component named " + name);
            return this.AddComponentByIndex(componentIndex);
        }

        public StateEntity AddComponentByIndex(int index) {
            this.AddComponent(index, this.CreateComponent(index, StateComponentsLookup.componentTypes[index]));
            return this;
        }

        //
        // Flag Components
        //

        // Loaded
        static readonly Components.State.Loaded _loadedComponent = new Components.State.Loaded();
        public bool loaded {
            get { return HasComponent(StateComponentsLookup.Loaded); }
            set {
                if (value != loaded) {
                    if (value) {
                        AddComponent(StateComponentsLookup.Loaded, _loadedComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.Loaded);
                    }
                }
            }
        }

        public bool HasLoaded() {
            return HasComponent(StateComponentsLookup.Loaded);
        }

        public void RemoveLoaded() {
            RemoveComponent(StateComponentsLookup.Loaded);
        }

        public void PingLoaded() {
            var component = GetComponent(StateComponentsLookup.Loaded);
            if (component != null) ReplaceComponent(StateComponentsLookup.Loaded, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.Loaded, null);
        }

        // Application
        static readonly Components.State.Application _applicationComponent = new Components.State.Application();
        public bool application {
            get { return HasComponent(StateComponentsLookup.Application); }
            set {
                if (value != application) {
                    if (value) {
                        AddComponent(StateComponentsLookup.Application, _applicationComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.Application);
                    }
                }
            }
        }

        public bool HasApplication() {
            return HasComponent(StateComponentsLookup.Application);
        }

        public void RemoveApplication() {
            RemoveComponent(StateComponentsLookup.Application);
        }

        public void PingApplication() {
            var component = GetComponent(StateComponentsLookup.Application);
            if (component != null) ReplaceComponent(StateComponentsLookup.Application, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.Application, null);
        }

        //
        // Value Components
        //

        // LoadingProgress
        public float _loadingProgress { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingProgress)) throw new System.Exception("Entity does not have component 'LoadingProgress'. You can check safely with 'HasLoadingProgress()'");
                return ((Components.State.LoadingProgress)GetComponent(StateComponentsLookup.LoadingProgress)).value;
            } 
            set {
                ((Components.State.LoadingProgress)GetComponent(StateComponentsLookup.LoadingProgress)).value = value;
            }
        }

        public float loadingProgress { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingProgress)) throw new System.Exception("Entity does not have component 'LoadingProgress'. You can check safely with 'HasLoadingProgress()'");
                return ((Components.State.LoadingProgress)GetComponent(StateComponentsLookup.LoadingProgress)).value;
            } 
            set {
                var component = CreateComponent<Components.State.LoadingProgress>(StateComponentsLookup.LoadingProgress);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.LoadingProgress, component);
            }
        }

        public bool HasLoadingProgress() {
            return HasComponent(StateComponentsLookup.LoadingProgress);
        }

        public void RemoveLoadingProgress() {
            if (HasComponent(StateComponentsLookup.LoadingProgress)) { RemoveComponent(StateComponentsLookup.LoadingProgress); }
        }

        public void PingLoadingProgress() {
            var component = GetComponent(StateComponentsLookup.LoadingProgress);
            if (component != null) ReplaceComponent(StateComponentsLookup.LoadingProgress, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.LoadingProgress, null);
        }

        // SceneName
        public string _sceneName { 
            get {
                if (!HasComponent(StateComponentsLookup.SceneName)) throw new System.Exception("Entity does not have component 'SceneName'. You can check safely with 'HasSceneName()'");
                return ((Components.State.SceneName)GetComponent(StateComponentsLookup.SceneName)).value;
            } 
            set {
                ((Components.State.SceneName)GetComponent(StateComponentsLookup.SceneName)).value = value;
            }
        }

        public string sceneName { 
            get {
                if (!HasComponent(StateComponentsLookup.SceneName)) throw new System.Exception("Entity does not have component 'SceneName'. You can check safely with 'HasSceneName()'");
                return ((Components.State.SceneName)GetComponent(StateComponentsLookup.SceneName)).value;
            } 
            set {
                var component = CreateComponent<Components.State.SceneName>(StateComponentsLookup.SceneName);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.SceneName, component);
            }
        }

        public bool HasSceneName() {
            return HasComponent(StateComponentsLookup.SceneName);
        }

        public void RemoveSceneName() {
            if (HasComponent(StateComponentsLookup.SceneName)) { RemoveComponent(StateComponentsLookup.SceneName); }
        }

        public void PingSceneName() {
            var component = GetComponent(StateComponentsLookup.SceneName);
            if (component != null) ReplaceComponent(StateComponentsLookup.SceneName, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.SceneName, null);
        }

        // LoadingManagerUnit
        public Scripts.LoadingManagerUnit _loadingManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingManagerUnit)) throw new System.Exception("Entity does not have component 'LoadingManagerUnit'. You can check safely with 'HasLoadingManagerUnit()'");
                return ((Components.State.LoadingManagerUnit)GetComponent(StateComponentsLookup.LoadingManagerUnit)).value;
            } 
            set {
                ((Components.State.LoadingManagerUnit)GetComponent(StateComponentsLookup.LoadingManagerUnit)).value = value;
            }
        }

        public Scripts.LoadingManagerUnit loadingManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingManagerUnit)) throw new System.Exception("Entity does not have component 'LoadingManagerUnit'. You can check safely with 'HasLoadingManagerUnit()'");
                return ((Components.State.LoadingManagerUnit)GetComponent(StateComponentsLookup.LoadingManagerUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.LoadingManagerUnit>(StateComponentsLookup.LoadingManagerUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.LoadingManagerUnit, component);
            }
        }

        public bool HasLoadingManagerUnit() {
            return HasComponent(StateComponentsLookup.LoadingManagerUnit);
        }

        public void RemoveLoadingManagerUnit() {
            if (HasComponent(StateComponentsLookup.LoadingManagerUnit)) { RemoveComponent(StateComponentsLookup.LoadingManagerUnit); }
        }

        public void PingLoadingManagerUnit() {
            var component = GetComponent(StateComponentsLookup.LoadingManagerUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.LoadingManagerUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.LoadingManagerUnit, null);
        }

        // LoadingSeconds
        public float _loadingSeconds { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingSeconds)) throw new System.Exception("Entity does not have component 'LoadingSeconds'. You can check safely with 'HasLoadingSeconds()'");
                return ((Components.State.LoadingSeconds)GetComponent(StateComponentsLookup.LoadingSeconds)).value;
            } 
            set {
                ((Components.State.LoadingSeconds)GetComponent(StateComponentsLookup.LoadingSeconds)).value = value;
            }
        }

        public float loadingSeconds { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingSeconds)) throw new System.Exception("Entity does not have component 'LoadingSeconds'. You can check safely with 'HasLoadingSeconds()'");
                return ((Components.State.LoadingSeconds)GetComponent(StateComponentsLookup.LoadingSeconds)).value;
            } 
            set {
                var component = CreateComponent<Components.State.LoadingSeconds>(StateComponentsLookup.LoadingSeconds);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.LoadingSeconds, component);
            }
        }

        public bool HasLoadingSeconds() {
            return HasComponent(StateComponentsLookup.LoadingSeconds);
        }

        public void RemoveLoadingSeconds() {
            if (HasComponent(StateComponentsLookup.LoadingSeconds)) { RemoveComponent(StateComponentsLookup.LoadingSeconds); }
        }

        public void PingLoadingSeconds() {
            var component = GetComponent(StateComponentsLookup.LoadingSeconds);
            if (component != null) ReplaceComponent(StateComponentsLookup.LoadingSeconds, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.LoadingSeconds, null);
        }
    }

}
namespace DZ.Game {
    public interface IFlagTrashEntity : Entitas.IEntity {
        bool flagTrash { get; set; }
        bool HasFlagTrash();
        void RemoveFlagTrash();
        void PingFlagTrash();
    }

    public interface IFlagTrashValidatedEntity : Entitas.IEntity {
        bool flagTrashValidated { get; set; }
        bool HasFlagTrashValidated();
        void RemoveFlagTrashValidated();
        void PingFlagTrashValidated();
    }

    public interface ITrashTimerEntity : Entitas.IEntity {
        float trashTimer { get; set; }
        bool HasTrashTimer();
        void RemoveTrashTimer();
        void PingTrashTimer();
    }

    public sealed partial class InputEntity: Entitas.Entity, Entitas.IEntity {
        public InputEntity AddComponentByName(string name) {
            var componentIndex = InputComponentsLookup.GetComponentIndex(name);
            if (componentIndex == -1) throw new System.Exception("There is no component named " + name);
            return this.AddComponentByIndex(componentIndex);
        }

        public InputEntity AddComponentByIndex(int index) {
            this.AddComponent(index, this.CreateComponent(index, InputComponentsLookup.componentTypes[index]));
            return this;
        }

        //
        // Flag Components
        //

        // FlagEvent
        static readonly Components.Input.FlagEvent _flagEventComponent = new Components.Input.FlagEvent();
        public bool flagEvent {
            get { return HasComponent(InputComponentsLookup.FlagEvent); }
            set {
                if (value != flagEvent) {
                    if (value) {
                        AddComponent(InputComponentsLookup.FlagEvent, _flagEventComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.FlagEvent);
                    }
                }
            }
        }

        public bool HasFlagEvent() {
            return HasComponent(InputComponentsLookup.FlagEvent);
        }

        public void RemoveFlagEvent() {
            RemoveComponent(InputComponentsLookup.FlagEvent);
        }

        public void PingFlagEvent() {
            var component = GetComponent(InputComponentsLookup.FlagEvent);
            if (component != null) ReplaceComponent(InputComponentsLookup.FlagEvent, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.FlagEvent, null);
        }

        // FlagTrash
        static readonly Components.Input.FlagTrash _flagTrashComponent = new Components.Input.FlagTrash();
        public bool flagTrash {
            get { return HasComponent(InputComponentsLookup.FlagTrash); }
            set {
                if (value != flagTrash) {
                    if (value) {
                        AddComponent(InputComponentsLookup.FlagTrash, _flagTrashComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.FlagTrash);
                    }
                }
            }
        }

        public bool HasFlagTrash() {
            return HasComponent(InputComponentsLookup.FlagTrash);
        }

        public void RemoveFlagTrash() {
            RemoveComponent(InputComponentsLookup.FlagTrash);
        }

        public void PingFlagTrash() {
            var component = GetComponent(InputComponentsLookup.FlagTrash);
            if (component != null) ReplaceComponent(InputComponentsLookup.FlagTrash, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.FlagTrash, null);
        }

        // FlagTrashValidated
        static readonly Components.Input.FlagTrashValidated _flagTrashValidatedComponent = new Components.Input.FlagTrashValidated();
        public bool flagTrashValidated {
            get { return HasComponent(InputComponentsLookup.FlagTrashValidated); }
            set {
                if (value != flagTrashValidated) {
                    if (value) {
                        AddComponent(InputComponentsLookup.FlagTrashValidated, _flagTrashValidatedComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.FlagTrashValidated);
                    }
                }
            }
        }

        public bool HasFlagTrashValidated() {
            return HasComponent(InputComponentsLookup.FlagTrashValidated);
        }

        public void RemoveFlagTrashValidated() {
            RemoveComponent(InputComponentsLookup.FlagTrashValidated);
        }

        public void PingFlagTrashValidated() {
            var component = GetComponent(InputComponentsLookup.FlagTrashValidated);
            if (component != null) ReplaceComponent(InputComponentsLookup.FlagTrashValidated, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.FlagTrashValidated, null);
        }

        //
        // Value Components
        //

        // TrashTimer
        public float _trashTimer { 
            get {
                if (!HasComponent(InputComponentsLookup.TrashTimer)) throw new System.Exception("Entity does not have component 'TrashTimer'. You can check safely with 'HasTrashTimer()'");
                return ((Components.Input.TrashTimer)GetComponent(InputComponentsLookup.TrashTimer)).value;
            } 
            set {
                ((Components.Input.TrashTimer)GetComponent(InputComponentsLookup.TrashTimer)).value = value;
            }
        }

        public float trashTimer { 
            get {
                if (!HasComponent(InputComponentsLookup.TrashTimer)) throw new System.Exception("Entity does not have component 'TrashTimer'. You can check safely with 'HasTrashTimer()'");
                return ((Components.Input.TrashTimer)GetComponent(InputComponentsLookup.TrashTimer)).value;
            } 
            set {
                var component = CreateComponent<Components.Input.TrashTimer>(InputComponentsLookup.TrashTimer);
                component.value = value;
                ReplaceComponent(InputComponentsLookup.TrashTimer, component);
            }
        }

        public bool HasTrashTimer() {
            return HasComponent(InputComponentsLookup.TrashTimer);
        }

        public void RemoveTrashTimer() {
            if (HasComponent(InputComponentsLookup.TrashTimer)) { RemoveComponent(InputComponentsLookup.TrashTimer); }
        }

        public void PingTrashTimer() {
            var component = GetComponent(InputComponentsLookup.TrashTimer);
            if (component != null) ReplaceComponent(InputComponentsLookup.TrashTimer, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.TrashTimer, null);
        }

        // EventId
        public string _eventId { 
            get {
                if (!HasComponent(InputComponentsLookup.EventId)) throw new System.Exception("Entity does not have component 'EventId'. You can check safely with 'HasEventId()'");
                return ((Components.Input.EventId)GetComponent(InputComponentsLookup.EventId)).value;
            } 
            set {
                ((Components.Input.EventId)GetComponent(InputComponentsLookup.EventId)).value = value;
            }
        }

        public string eventId { 
            get {
                if (!HasComponent(InputComponentsLookup.EventId)) throw new System.Exception("Entity does not have component 'EventId'. You can check safely with 'HasEventId()'");
                return ((Components.Input.EventId)GetComponent(InputComponentsLookup.EventId)).value;
            } 
            set {
                var component = CreateComponent<Components.Input.EventId>(InputComponentsLookup.EventId);
                component.value = value;
                ReplaceComponent(InputComponentsLookup.EventId, component);
            }
        }

        public bool HasEventId() {
            return HasComponent(InputComponentsLookup.EventId);
        }

        public void RemoveEventId() {
            if (HasComponent(InputComponentsLookup.EventId)) { RemoveComponent(InputComponentsLookup.EventId); }
        }

        public void PingEventId() {
            var component = GetComponent(InputComponentsLookup.EventId);
            if (component != null) ReplaceComponent(InputComponentsLookup.EventId, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.EventId, null);
        }
    }

    public sealed partial class StateEntity: Entitas.Entity, Entitas.IEntity {
        public StateEntity AddComponentByName(string name) {
            var componentIndex = StateComponentsLookup.GetComponentIndex(name);
            if (componentIndex == -1) throw new System.Exception("There is no component named " + name);
            return this.AddComponentByIndex(componentIndex);
        }

        public StateEntity AddComponentByIndex(int index) {
            this.AddComponent(index, this.CreateComponent(index, StateComponentsLookup.componentTypes[index]));
            return this;
        }

        //
        // Flag Components
        //

        // FlagTrash
        static readonly Components.State.FlagTrash _flagTrashComponent = new Components.State.FlagTrash();
        public bool flagTrash {
            get { return HasComponent(StateComponentsLookup.FlagTrash); }
            set {
                if (value != flagTrash) {
                    if (value) {
                        AddComponent(StateComponentsLookup.FlagTrash, _flagTrashComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.FlagTrash);
                    }
                }
            }
        }

        public bool HasFlagTrash() {
            return HasComponent(StateComponentsLookup.FlagTrash);
        }

        public void RemoveFlagTrash() {
            RemoveComponent(StateComponentsLookup.FlagTrash);
        }

        public void PingFlagTrash() {
            var component = GetComponent(StateComponentsLookup.FlagTrash);
            if (component != null) ReplaceComponent(StateComponentsLookup.FlagTrash, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.FlagTrash, null);
        }

        // FlagTrashValidated
        static readonly Components.State.FlagTrashValidated _flagTrashValidatedComponent = new Components.State.FlagTrashValidated();
        public bool flagTrashValidated {
            get { return HasComponent(StateComponentsLookup.FlagTrashValidated); }
            set {
                if (value != flagTrashValidated) {
                    if (value) {
                        AddComponent(StateComponentsLookup.FlagTrashValidated, _flagTrashValidatedComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.FlagTrashValidated);
                    }
                }
            }
        }

        public bool HasFlagTrashValidated() {
            return HasComponent(StateComponentsLookup.FlagTrashValidated);
        }

        public void RemoveFlagTrashValidated() {
            RemoveComponent(StateComponentsLookup.FlagTrashValidated);
        }

        public void PingFlagTrashValidated() {
            var component = GetComponent(StateComponentsLookup.FlagTrashValidated);
            if (component != null) ReplaceComponent(StateComponentsLookup.FlagTrashValidated, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.FlagTrashValidated, null);
        }

        // FlagLoaded
        static readonly Components.State.FlagLoaded _flagLoadedComponent = new Components.State.FlagLoaded();
        public bool flagLoaded {
            get { return HasComponent(StateComponentsLookup.FlagLoaded); }
            set {
                if (value != flagLoaded) {
                    if (value) {
                        AddComponent(StateComponentsLookup.FlagLoaded, _flagLoadedComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.FlagLoaded);
                    }
                }
            }
        }

        public bool HasFlagLoaded() {
            return HasComponent(StateComponentsLookup.FlagLoaded);
        }

        public void RemoveFlagLoaded() {
            RemoveComponent(StateComponentsLookup.FlagLoaded);
        }

        public void PingFlagLoaded() {
            var component = GetComponent(StateComponentsLookup.FlagLoaded);
            if (component != null) ReplaceComponent(StateComponentsLookup.FlagLoaded, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.FlagLoaded, null);
        }

        // LevelPart
        static readonly Components.State.LevelPart _levelPartComponent = new Components.State.LevelPart();
        public bool levelPart {
            get { return HasComponent(StateComponentsLookup.LevelPart); }
            set {
                if (value != levelPart) {
                    if (value) {
                        AddComponent(StateComponentsLookup.LevelPart, _levelPartComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.LevelPart);
                    }
                }
            }
        }

        public bool HasLevelPart() {
            return HasComponent(StateComponentsLookup.LevelPart);
        }

        public void RemoveLevelPart() {
            RemoveComponent(StateComponentsLookup.LevelPart);
        }

        public void PingLevelPart() {
            var component = GetComponent(StateComponentsLookup.LevelPart);
            if (component != null) ReplaceComponent(StateComponentsLookup.LevelPart, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.LevelPart, null);
        }

        // View
        static readonly Components.State.View _viewComponent = new Components.State.View();
        public bool view {
            get { return HasComponent(StateComponentsLookup.View); }
            set {
                if (value != view) {
                    if (value) {
                        AddComponent(StateComponentsLookup.View, _viewComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.View);
                    }
                }
            }
        }

        public bool HasView() {
            return HasComponent(StateComponentsLookup.View);
        }

        public void RemoveView() {
            RemoveComponent(StateComponentsLookup.View);
        }

        public void PingView() {
            var component = GetComponent(StateComponentsLookup.View);
            if (component != null) ReplaceComponent(StateComponentsLookup.View, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.View, null);
        }

        //
        // Value Components
        //

        // TrashTimer
        public float _trashTimer { 
            get {
                if (!HasComponent(StateComponentsLookup.TrashTimer)) throw new System.Exception("Entity does not have component 'TrashTimer'. You can check safely with 'HasTrashTimer()'");
                return ((Components.State.TrashTimer)GetComponent(StateComponentsLookup.TrashTimer)).value;
            } 
            set {
                ((Components.State.TrashTimer)GetComponent(StateComponentsLookup.TrashTimer)).value = value;
            }
        }

        public float trashTimer { 
            get {
                if (!HasComponent(StateComponentsLookup.TrashTimer)) throw new System.Exception("Entity does not have component 'TrashTimer'. You can check safely with 'HasTrashTimer()'");
                return ((Components.State.TrashTimer)GetComponent(StateComponentsLookup.TrashTimer)).value;
            } 
            set {
                var component = CreateComponent<Components.State.TrashTimer>(StateComponentsLookup.TrashTimer);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.TrashTimer, component);
            }
        }

        public bool HasTrashTimer() {
            return HasComponent(StateComponentsLookup.TrashTimer);
        }

        public void RemoveTrashTimer() {
            if (HasComponent(StateComponentsLookup.TrashTimer)) { RemoveComponent(StateComponentsLookup.TrashTimer); }
        }

        public void PingTrashTimer() {
            var component = GetComponent(StateComponentsLookup.TrashTimer);
            if (component != null) ReplaceComponent(StateComponentsLookup.TrashTimer, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.TrashTimer, null);
        }

        // StageManagerUnit
        public Scripts.StageManagerUnit _stageManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.StageManagerUnit)) throw new System.Exception("Entity does not have component 'StageManagerUnit'. You can check safely with 'HasStageManagerUnit()'");
                return ((Components.State.StageManagerUnit)GetComponent(StateComponentsLookup.StageManagerUnit)).value;
            } 
            set {
                ((Components.State.StageManagerUnit)GetComponent(StateComponentsLookup.StageManagerUnit)).value = value;
            }
        }

        public Scripts.StageManagerUnit stageManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.StageManagerUnit)) throw new System.Exception("Entity does not have component 'StageManagerUnit'. You can check safely with 'HasStageManagerUnit()'");
                return ((Components.State.StageManagerUnit)GetComponent(StateComponentsLookup.StageManagerUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.StageManagerUnit>(StateComponentsLookup.StageManagerUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.StageManagerUnit, component);
            }
        }

        public bool HasStageManagerUnit() {
            return HasComponent(StateComponentsLookup.StageManagerUnit);
        }

        public void RemoveStageManagerUnit() {
            if (HasComponent(StateComponentsLookup.StageManagerUnit)) { RemoveComponent(StateComponentsLookup.StageManagerUnit); }
        }

        public void PingStageManagerUnit() {
            var component = GetComponent(StateComponentsLookup.StageManagerUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.StageManagerUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.StageManagerUnit, null);
        }

        // Uid
        public int _uid { 
            get {
                if (!HasComponent(StateComponentsLookup.Uid)) throw new System.Exception("Entity does not have component 'Uid'. You can check safely with 'HasUid()'");
                return ((Components.State.Uid)GetComponent(StateComponentsLookup.Uid)).value;
            } 
            set {
                ((Components.State.Uid)GetComponent(StateComponentsLookup.Uid)).value = value;
            }
        }

        public int uid { 
            get {
                if (!HasComponent(StateComponentsLookup.Uid)) throw new System.Exception("Entity does not have component 'Uid'. You can check safely with 'HasUid()'");
                return ((Components.State.Uid)GetComponent(StateComponentsLookup.Uid)).value;
            } 
            set {
                var component = CreateComponent<Components.State.Uid>(StateComponentsLookup.Uid);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.Uid, component);
            }
        }

        public bool HasUid() {
            return HasComponent(StateComponentsLookup.Uid);
        }

        public void RemoveUid() {
            if (HasComponent(StateComponentsLookup.Uid)) { RemoveComponent(StateComponentsLookup.Uid); }
        }

        public void PingUid() {
            var component = GetComponent(StateComponentsLookup.Uid);
            if (component != null) ReplaceComponent(StateComponentsLookup.Uid, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.Uid, null);
        }

        // UidUnit
        public FS.Uid.Scripts.UidUnit _uidUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.UidUnit)) throw new System.Exception("Entity does not have component 'UidUnit'. You can check safely with 'HasUidUnit()'");
                return ((Components.State.UidUnit)GetComponent(StateComponentsLookup.UidUnit)).value;
            } 
            set {
                ((Components.State.UidUnit)GetComponent(StateComponentsLookup.UidUnit)).value = value;
            }
        }

        public FS.Uid.Scripts.UidUnit uidUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.UidUnit)) throw new System.Exception("Entity does not have component 'UidUnit'. You can check safely with 'HasUidUnit()'");
                return ((Components.State.UidUnit)GetComponent(StateComponentsLookup.UidUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.UidUnit>(StateComponentsLookup.UidUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.UidUnit, component);
            }
        }

        public bool HasUidUnit() {
            return HasComponent(StateComponentsLookup.UidUnit);
        }

        public void RemoveUidUnit() {
            if (HasComponent(StateComponentsLookup.UidUnit)) { RemoveComponent(StateComponentsLookup.UidUnit); }
        }

        public void PingUidUnit() {
            var component = GetComponent(StateComponentsLookup.UidUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.UidUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.UidUnit, null);
        }

        // ProductUnit
        public FS.PrefabFactory.Scripts.ProductUnit _productUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.ProductUnit)) throw new System.Exception("Entity does not have component 'ProductUnit'. You can check safely with 'HasProductUnit()'");
                return ((Components.State.ProductUnit)GetComponent(StateComponentsLookup.ProductUnit)).value;
            } 
            set {
                ((Components.State.ProductUnit)GetComponent(StateComponentsLookup.ProductUnit)).value = value;
            }
        }

        public FS.PrefabFactory.Scripts.ProductUnit productUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.ProductUnit)) throw new System.Exception("Entity does not have component 'ProductUnit'. You can check safely with 'HasProductUnit()'");
                return ((Components.State.ProductUnit)GetComponent(StateComponentsLookup.ProductUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.ProductUnit>(StateComponentsLookup.ProductUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.ProductUnit, component);
            }
        }

        public bool HasProductUnit() {
            return HasComponent(StateComponentsLookup.ProductUnit);
        }

        public void RemoveProductUnit() {
            if (HasComponent(StateComponentsLookup.ProductUnit)) { RemoveComponent(StateComponentsLookup.ProductUnit); }
        }

        public void PingProductUnit() {
            var component = GetComponent(StateComponentsLookup.ProductUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.ProductUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.ProductUnit, null);
        }

        // AudioManagerUnit
        public Scripts.AudioManagerUnit _audioManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.AudioManagerUnit)) throw new System.Exception("Entity does not have component 'AudioManagerUnit'. You can check safely with 'HasAudioManagerUnit()'");
                return ((Components.State.AudioManagerUnit)GetComponent(StateComponentsLookup.AudioManagerUnit)).value;
            } 
            set {
                ((Components.State.AudioManagerUnit)GetComponent(StateComponentsLookup.AudioManagerUnit)).value = value;
            }
        }

        public Scripts.AudioManagerUnit audioManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.AudioManagerUnit)) throw new System.Exception("Entity does not have component 'AudioManagerUnit'. You can check safely with 'HasAudioManagerUnit()'");
                return ((Components.State.AudioManagerUnit)GetComponent(StateComponentsLookup.AudioManagerUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.AudioManagerUnit>(StateComponentsLookup.AudioManagerUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.AudioManagerUnit, component);
            }
        }

        public bool HasAudioManagerUnit() {
            return HasComponent(StateComponentsLookup.AudioManagerUnit);
        }

        public void RemoveAudioManagerUnit() {
            if (HasComponent(StateComponentsLookup.AudioManagerUnit)) { RemoveComponent(StateComponentsLookup.AudioManagerUnit); }
        }

        public void PingAudioManagerUnit() {
            var component = GetComponent(StateComponentsLookup.AudioManagerUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.AudioManagerUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.AudioManagerUnit, null);
        }

        // AudioEffectManagerUnit
        public Scripts.AudioEffectManagerUnit _audioEffectManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.AudioEffectManagerUnit)) throw new System.Exception("Entity does not have component 'AudioEffectManagerUnit'. You can check safely with 'HasAudioEffectManagerUnit()'");
                return ((Components.State.AudioEffectManagerUnit)GetComponent(StateComponentsLookup.AudioEffectManagerUnit)).value;
            } 
            set {
                ((Components.State.AudioEffectManagerUnit)GetComponent(StateComponentsLookup.AudioEffectManagerUnit)).value = value;
            }
        }

        public Scripts.AudioEffectManagerUnit audioEffectManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.AudioEffectManagerUnit)) throw new System.Exception("Entity does not have component 'AudioEffectManagerUnit'. You can check safely with 'HasAudioEffectManagerUnit()'");
                return ((Components.State.AudioEffectManagerUnit)GetComponent(StateComponentsLookup.AudioEffectManagerUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.AudioEffectManagerUnit>(StateComponentsLookup.AudioEffectManagerUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.AudioEffectManagerUnit, component);
            }
        }

        public bool HasAudioEffectManagerUnit() {
            return HasComponent(StateComponentsLookup.AudioEffectManagerUnit);
        }

        public void RemoveAudioEffectManagerUnit() {
            if (HasComponent(StateComponentsLookup.AudioEffectManagerUnit)) { RemoveComponent(StateComponentsLookup.AudioEffectManagerUnit); }
        }

        public void PingAudioEffectManagerUnit() {
            var component = GetComponent(StateComponentsLookup.AudioEffectManagerUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.AudioEffectManagerUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.AudioEffectManagerUnit, null);
        }

        // AudioEffectUnit
        public Scripts.AudioEffectUnit _audioEffectUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.AudioEffectUnit)) throw new System.Exception("Entity does not have component 'AudioEffectUnit'. You can check safely with 'HasAudioEffectUnit()'");
                return ((Components.State.AudioEffectUnit)GetComponent(StateComponentsLookup.AudioEffectUnit)).value;
            } 
            set {
                ((Components.State.AudioEffectUnit)GetComponent(StateComponentsLookup.AudioEffectUnit)).value = value;
            }
        }

        public Scripts.AudioEffectUnit audioEffectUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.AudioEffectUnit)) throw new System.Exception("Entity does not have component 'AudioEffectUnit'. You can check safely with 'HasAudioEffectUnit()'");
                return ((Components.State.AudioEffectUnit)GetComponent(StateComponentsLookup.AudioEffectUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.AudioEffectUnit>(StateComponentsLookup.AudioEffectUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.AudioEffectUnit, component);
            }
        }

        public bool HasAudioEffectUnit() {
            return HasComponent(StateComponentsLookup.AudioEffectUnit);
        }

        public void RemoveAudioEffectUnit() {
            if (HasComponent(StateComponentsLookup.AudioEffectUnit)) { RemoveComponent(StateComponentsLookup.AudioEffectUnit); }
        }

        public void PingAudioEffectUnit() {
            var component = GetComponent(StateComponentsLookup.AudioEffectUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.AudioEffectUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.AudioEffectUnit, null);
        }

        // AudioEffectProductUnit
        public Scripts.AudioEffectProductUnit _audioEffectProductUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.AudioEffectProductUnit)) throw new System.Exception("Entity does not have component 'AudioEffectProductUnit'. You can check safely with 'HasAudioEffectProductUnit()'");
                return ((Components.State.AudioEffectProductUnit)GetComponent(StateComponentsLookup.AudioEffectProductUnit)).value;
            } 
            set {
                ((Components.State.AudioEffectProductUnit)GetComponent(StateComponentsLookup.AudioEffectProductUnit)).value = value;
            }
        }

        public Scripts.AudioEffectProductUnit audioEffectProductUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.AudioEffectProductUnit)) throw new System.Exception("Entity does not have component 'AudioEffectProductUnit'. You can check safely with 'HasAudioEffectProductUnit()'");
                return ((Components.State.AudioEffectProductUnit)GetComponent(StateComponentsLookup.AudioEffectProductUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.AudioEffectProductUnit>(StateComponentsLookup.AudioEffectProductUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.AudioEffectProductUnit, component);
            }
        }

        public bool HasAudioEffectProductUnit() {
            return HasComponent(StateComponentsLookup.AudioEffectProductUnit);
        }

        public void RemoveAudioEffectProductUnit() {
            if (HasComponent(StateComponentsLookup.AudioEffectProductUnit)) { RemoveComponent(StateComponentsLookup.AudioEffectProductUnit); }
        }

        public void PingAudioEffectProductUnit() {
            var component = GetComponent(StateComponentsLookup.AudioEffectProductUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.AudioEffectProductUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.AudioEffectProductUnit, null);
        }

        // SubsManagerUnit
        public Scripts.SubsManagerUnit _subsManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.SubsManagerUnit)) throw new System.Exception("Entity does not have component 'SubsManagerUnit'. You can check safely with 'HasSubsManagerUnit()'");
                return ((Components.State.SubsManagerUnit)GetComponent(StateComponentsLookup.SubsManagerUnit)).value;
            } 
            set {
                ((Components.State.SubsManagerUnit)GetComponent(StateComponentsLookup.SubsManagerUnit)).value = value;
            }
        }

        public Scripts.SubsManagerUnit subsManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.SubsManagerUnit)) throw new System.Exception("Entity does not have component 'SubsManagerUnit'. You can check safely with 'HasSubsManagerUnit()'");
                return ((Components.State.SubsManagerUnit)GetComponent(StateComponentsLookup.SubsManagerUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.SubsManagerUnit>(StateComponentsLookup.SubsManagerUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.SubsManagerUnit, component);
            }
        }

        public bool HasSubsManagerUnit() {
            return HasComponent(StateComponentsLookup.SubsManagerUnit);
        }

        public void RemoveSubsManagerUnit() {
            if (HasComponent(StateComponentsLookup.SubsManagerUnit)) { RemoveComponent(StateComponentsLookup.SubsManagerUnit); }
        }

        public void PingSubsManagerUnit() {
            var component = GetComponent(StateComponentsLookup.SubsManagerUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.SubsManagerUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.SubsManagerUnit, null);
        }
    }

}
