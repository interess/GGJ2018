// <auto-generated>
//     This code was generated with love by Gentitas.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using UnityEngine;
using System.Collections.Generic;

namespace DZ.Core {
    public sealed partial class StateEntity: Entitas.Entity, Entitas.IEntity {
        public StateEntity AddComponentByName(string name) {
            var componentIndex = StateComponentsLookup.GetComponentIndex(name);
            if (componentIndex == -1) throw new System.Exception("There is no component named " + name);
            return this.AddComponentByIndex(componentIndex);
        }

        public StateEntity AddComponentByIndex(int index) {
            this.AddComponent(index, this.CreateComponent(index, StateComponentsLookup.componentTypes[index]));
            return this;
        }

        //
        // Flag Components
        //

        // Loaded
        static readonly Components.State.Loaded _loadedComponent = new Components.State.Loaded();
        public bool loaded {
            get { return HasComponent(StateComponentsLookup.Loaded); }
            set {
                if (value != loaded) {
                    if (value) {
                        AddComponent(StateComponentsLookup.Loaded, _loadedComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.Loaded);
                    }
                }
            }
        }

        public bool HasLoaded() {
            return HasComponent(StateComponentsLookup.Loaded);
        }

        public void RemoveLoaded() {
            RemoveComponent(StateComponentsLookup.Loaded);
        }

        public void PingLoaded() {
            var component = GetComponent(StateComponentsLookup.Loaded);
            if (component != null) ReplaceComponent(StateComponentsLookup.Loaded, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.Loaded, null);
        }

        // Application
        static readonly Components.State.Application _applicationComponent = new Components.State.Application();
        public bool application {
            get { return HasComponent(StateComponentsLookup.Application); }
            set {
                if (value != application) {
                    if (value) {
                        AddComponent(StateComponentsLookup.Application, _applicationComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.Application);
                    }
                }
            }
        }

        public bool HasApplication() {
            return HasComponent(StateComponentsLookup.Application);
        }

        public void RemoveApplication() {
            RemoveComponent(StateComponentsLookup.Application);
        }

        public void PingApplication() {
            var component = GetComponent(StateComponentsLookup.Application);
            if (component != null) ReplaceComponent(StateComponentsLookup.Application, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.Application, null);
        }

        //
        // Value Components
        //

        // LoadingProgress
        public float _loadingProgress { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingProgress)) throw new System.Exception("Entity does not have component 'LoadingProgress'. You can check safely with 'HasLoadingProgress()'");
                return ((Components.State.LoadingProgress)GetComponent(StateComponentsLookup.LoadingProgress)).value;
            } 
            set {
                ((Components.State.LoadingProgress)GetComponent(StateComponentsLookup.LoadingProgress)).value = value;
            }
        }

        public float loadingProgress { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingProgress)) throw new System.Exception("Entity does not have component 'LoadingProgress'. You can check safely with 'HasLoadingProgress()'");
                return ((Components.State.LoadingProgress)GetComponent(StateComponentsLookup.LoadingProgress)).value;
            } 
            set {
                var component = CreateComponent<Components.State.LoadingProgress>(StateComponentsLookup.LoadingProgress);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.LoadingProgress, component);
            }
        }

        public bool HasLoadingProgress() {
            return HasComponent(StateComponentsLookup.LoadingProgress);
        }

        public void RemoveLoadingProgress() {
            if (HasComponent(StateComponentsLookup.LoadingProgress)) { RemoveComponent(StateComponentsLookup.LoadingProgress); }
        }

        public void PingLoadingProgress() {
            var component = GetComponent(StateComponentsLookup.LoadingProgress);
            if (component != null) ReplaceComponent(StateComponentsLookup.LoadingProgress, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.LoadingProgress, null);
        }

        // SceneName
        public string _sceneName { 
            get {
                if (!HasComponent(StateComponentsLookup.SceneName)) throw new System.Exception("Entity does not have component 'SceneName'. You can check safely with 'HasSceneName()'");
                return ((Components.State.SceneName)GetComponent(StateComponentsLookup.SceneName)).value;
            } 
            set {
                ((Components.State.SceneName)GetComponent(StateComponentsLookup.SceneName)).value = value;
            }
        }

        public string sceneName { 
            get {
                if (!HasComponent(StateComponentsLookup.SceneName)) throw new System.Exception("Entity does not have component 'SceneName'. You can check safely with 'HasSceneName()'");
                return ((Components.State.SceneName)GetComponent(StateComponentsLookup.SceneName)).value;
            } 
            set {
                var component = CreateComponent<Components.State.SceneName>(StateComponentsLookup.SceneName);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.SceneName, component);
            }
        }

        public bool HasSceneName() {
            return HasComponent(StateComponentsLookup.SceneName);
        }

        public void RemoveSceneName() {
            if (HasComponent(StateComponentsLookup.SceneName)) { RemoveComponent(StateComponentsLookup.SceneName); }
        }

        public void PingSceneName() {
            var component = GetComponent(StateComponentsLookup.SceneName);
            if (component != null) ReplaceComponent(StateComponentsLookup.SceneName, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.SceneName, null);
        }

        // LoadingManagerUnit
        public Scripts.LoadingManagerUnit _loadingManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingManagerUnit)) throw new System.Exception("Entity does not have component 'LoadingManagerUnit'. You can check safely with 'HasLoadingManagerUnit()'");
                return ((Components.State.LoadingManagerUnit)GetComponent(StateComponentsLookup.LoadingManagerUnit)).value;
            } 
            set {
                ((Components.State.LoadingManagerUnit)GetComponent(StateComponentsLookup.LoadingManagerUnit)).value = value;
            }
        }

        public Scripts.LoadingManagerUnit loadingManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingManagerUnit)) throw new System.Exception("Entity does not have component 'LoadingManagerUnit'. You can check safely with 'HasLoadingManagerUnit()'");
                return ((Components.State.LoadingManagerUnit)GetComponent(StateComponentsLookup.LoadingManagerUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.LoadingManagerUnit>(StateComponentsLookup.LoadingManagerUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.LoadingManagerUnit, component);
            }
        }

        public bool HasLoadingManagerUnit() {
            return HasComponent(StateComponentsLookup.LoadingManagerUnit);
        }

        public void RemoveLoadingManagerUnit() {
            if (HasComponent(StateComponentsLookup.LoadingManagerUnit)) { RemoveComponent(StateComponentsLookup.LoadingManagerUnit); }
        }

        public void PingLoadingManagerUnit() {
            var component = GetComponent(StateComponentsLookup.LoadingManagerUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.LoadingManagerUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.LoadingManagerUnit, null);
        }
    }

}
namespace DZ.Game {
    public sealed partial class InputEntity: Entitas.Entity, Entitas.IEntity {
        public InputEntity AddComponentByName(string name) {
            var componentIndex = InputComponentsLookup.GetComponentIndex(name);
            if (componentIndex == -1) throw new System.Exception("There is no component named " + name);
            return this.AddComponentByIndex(componentIndex);
        }

        public InputEntity AddComponentByIndex(int index) {
            this.AddComponent(index, this.CreateComponent(index, InputComponentsLookup.componentTypes[index]));
            return this;
        }

        //
        // Flag Components
        //

        // FlagEvent
        static readonly Components.Input.FlagEvent _flagEventComponent = new Components.Input.FlagEvent();
        public bool flagEvent {
            get { return HasComponent(InputComponentsLookup.FlagEvent); }
            set {
                if (value != flagEvent) {
                    if (value) {
                        AddComponent(InputComponentsLookup.FlagEvent, _flagEventComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.FlagEvent);
                    }
                }
            }
        }

        public bool HasFlagEvent() {
            return HasComponent(InputComponentsLookup.FlagEvent);
        }

        public void RemoveFlagEvent() {
            RemoveComponent(InputComponentsLookup.FlagEvent);
        }

        public void PingFlagEvent() {
            var component = GetComponent(InputComponentsLookup.FlagEvent);
            if (component != null) ReplaceComponent(InputComponentsLookup.FlagEvent, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.FlagEvent, null);
        }

        // FlagTrash
        static readonly Components.Input.FlagTrash _flagTrashComponent = new Components.Input.FlagTrash();
        public bool flagTrash {
            get { return HasComponent(InputComponentsLookup.FlagTrash); }
            set {
                if (value != flagTrash) {
                    if (value) {
                        AddComponent(InputComponentsLookup.FlagTrash, _flagTrashComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.FlagTrash);
                    }
                }
            }
        }

        public bool HasFlagTrash() {
            return HasComponent(InputComponentsLookup.FlagTrash);
        }

        public void RemoveFlagTrash() {
            RemoveComponent(InputComponentsLookup.FlagTrash);
        }

        public void PingFlagTrash() {
            var component = GetComponent(InputComponentsLookup.FlagTrash);
            if (component != null) ReplaceComponent(InputComponentsLookup.FlagTrash, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.FlagTrash, null);
        }

        // FlagTrashValidated
        static readonly Components.Input.FlagTrashValidated _flagTrashValidatedComponent = new Components.Input.FlagTrashValidated();
        public bool flagTrashValidated {
            get { return HasComponent(InputComponentsLookup.FlagTrashValidated); }
            set {
                if (value != flagTrashValidated) {
                    if (value) {
                        AddComponent(InputComponentsLookup.FlagTrashValidated, _flagTrashValidatedComponent);
                    } else {
                        RemoveComponent(InputComponentsLookup.FlagTrashValidated);
                    }
                }
            }
        }

        public bool HasFlagTrashValidated() {
            return HasComponent(InputComponentsLookup.FlagTrashValidated);
        }

        public void RemoveFlagTrashValidated() {
            RemoveComponent(InputComponentsLookup.FlagTrashValidated);
        }

        public void PingFlagTrashValidated() {
            var component = GetComponent(InputComponentsLookup.FlagTrashValidated);
            if (component != null) ReplaceComponent(InputComponentsLookup.FlagTrashValidated, component);
            else if (component == null) ReplaceComponent(InputComponentsLookup.FlagTrashValidated, null);
        }

        //
        // Value Components
        //
    }

    public sealed partial class StateEntity: Entitas.Entity, Entitas.IEntity {
        public StateEntity AddComponentByName(string name) {
            var componentIndex = StateComponentsLookup.GetComponentIndex(name);
            if (componentIndex == -1) throw new System.Exception("There is no component named " + name);
            return this.AddComponentByIndex(componentIndex);
        }

        public StateEntity AddComponentByIndex(int index) {
            this.AddComponent(index, this.CreateComponent(index, StateComponentsLookup.componentTypes[index]));
            return this;
        }

        //
        // Flag Components
        //

        // FlagTrash
        static readonly Components.State.FlagTrash _flagTrashComponent = new Components.State.FlagTrash();
        public bool flagTrash {
            get { return HasComponent(StateComponentsLookup.FlagTrash); }
            set {
                if (value != flagTrash) {
                    if (value) {
                        AddComponent(StateComponentsLookup.FlagTrash, _flagTrashComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.FlagTrash);
                    }
                }
            }
        }

        public bool HasFlagTrash() {
            return HasComponent(StateComponentsLookup.FlagTrash);
        }

        public void RemoveFlagTrash() {
            RemoveComponent(StateComponentsLookup.FlagTrash);
        }

        public void PingFlagTrash() {
            var component = GetComponent(StateComponentsLookup.FlagTrash);
            if (component != null) ReplaceComponent(StateComponentsLookup.FlagTrash, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.FlagTrash, null);
        }

        // FlagTrashValidated
        static readonly Components.State.FlagTrashValidated _flagTrashValidatedComponent = new Components.State.FlagTrashValidated();
        public bool flagTrashValidated {
            get { return HasComponent(StateComponentsLookup.FlagTrashValidated); }
            set {
                if (value != flagTrashValidated) {
                    if (value) {
                        AddComponent(StateComponentsLookup.FlagTrashValidated, _flagTrashValidatedComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.FlagTrashValidated);
                    }
                }
            }
        }

        public bool HasFlagTrashValidated() {
            return HasComponent(StateComponentsLookup.FlagTrashValidated);
        }

        public void RemoveFlagTrashValidated() {
            RemoveComponent(StateComponentsLookup.FlagTrashValidated);
        }

        public void PingFlagTrashValidated() {
            var component = GetComponent(StateComponentsLookup.FlagTrashValidated);
            if (component != null) ReplaceComponent(StateComponentsLookup.FlagTrashValidated, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.FlagTrashValidated, null);
        }

        //
        // Value Components
        //

        // StageManagerUnit
        public Scripts.StageManagerUnit _stageManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.StageManagerUnit)) throw new System.Exception("Entity does not have component 'StageManagerUnit'. You can check safely with 'HasStageManagerUnit()'");
                return ((Components.State.StageManagerUnit)GetComponent(StateComponentsLookup.StageManagerUnit)).value;
            } 
            set {
                ((Components.State.StageManagerUnit)GetComponent(StateComponentsLookup.StageManagerUnit)).value = value;
            }
        }

        public Scripts.StageManagerUnit stageManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.StageManagerUnit)) throw new System.Exception("Entity does not have component 'StageManagerUnit'. You can check safely with 'HasStageManagerUnit()'");
                return ((Components.State.StageManagerUnit)GetComponent(StateComponentsLookup.StageManagerUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.StageManagerUnit>(StateComponentsLookup.StageManagerUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.StageManagerUnit, component);
            }
        }

        public bool HasStageManagerUnit() {
            return HasComponent(StateComponentsLookup.StageManagerUnit);
        }

        public void RemoveStageManagerUnit() {
            if (HasComponent(StateComponentsLookup.StageManagerUnit)) { RemoveComponent(StateComponentsLookup.StageManagerUnit); }
        }

        public void PingStageManagerUnit() {
            var component = GetComponent(StateComponentsLookup.StageManagerUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.StageManagerUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.StageManagerUnit, null);
        }
    }

}
