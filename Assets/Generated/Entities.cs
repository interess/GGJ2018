// <auto-generated>
//     This code was generated with love by Gentitas.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using UnityEngine;
using System.Collections.Generic;

namespace DZ.Core {
    public sealed partial class StateEntity: Entitas.Entity, Entitas.IEntity {
        public StateEntity AddComponentByName(string name) {
            var componentIndex = StateComponentsLookup.GetComponentIndex(name);
            if (componentIndex == -1) throw new System.Exception("There is no component named " + name);
            return this.AddComponentByIndex(componentIndex);
        }

        public StateEntity AddComponentByIndex(int index) {
            this.AddComponent(index, this.CreateComponent(index, StateComponentsLookup.componentTypes[index]));
            return this;
        }

        //
        // Flag Components
        //

        // Loaded
        static readonly Components.State.Loaded _loadedComponent = new Components.State.Loaded();
        public bool loaded {
            get { return HasComponent(StateComponentsLookup.Loaded); }
            set {
                if (value != loaded) {
                    if (value) {
                        AddComponent(StateComponentsLookup.Loaded, _loadedComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.Loaded);
                    }
                }
            }
        }

        public bool HasLoaded() {
            return HasComponent(StateComponentsLookup.Loaded);
        }

        public void RemoveLoaded() {
            RemoveComponent(StateComponentsLookup.Loaded);
        }

        public void PingLoaded() {
            var component = GetComponent(StateComponentsLookup.Loaded);
            if (component != null) ReplaceComponent(StateComponentsLookup.Loaded, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.Loaded, null);
        }

        // Application
        static readonly Components.State.Application _applicationComponent = new Components.State.Application();
        public bool application {
            get { return HasComponent(StateComponentsLookup.Application); }
            set {
                if (value != application) {
                    if (value) {
                        AddComponent(StateComponentsLookup.Application, _applicationComponent);
                    } else {
                        RemoveComponent(StateComponentsLookup.Application);
                    }
                }
            }
        }

        public bool HasApplication() {
            return HasComponent(StateComponentsLookup.Application);
        }

        public void RemoveApplication() {
            RemoveComponent(StateComponentsLookup.Application);
        }

        public void PingApplication() {
            var component = GetComponent(StateComponentsLookup.Application);
            if (component != null) ReplaceComponent(StateComponentsLookup.Application, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.Application, null);
        }

        //
        // Value Components
        //

        // LoadingProgress
        public float _loadingProgress { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingProgress)) throw new System.Exception("Entity does not have component 'LoadingProgress'. You can check safely with 'HasLoadingProgress()'");
                return ((Components.State.LoadingProgress)GetComponent(StateComponentsLookup.LoadingProgress)).value;
            } 
            set {
                ((Components.State.LoadingProgress)GetComponent(StateComponentsLookup.LoadingProgress)).value = value;
            }
        }

        public float loadingProgress { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingProgress)) throw new System.Exception("Entity does not have component 'LoadingProgress'. You can check safely with 'HasLoadingProgress()'");
                return ((Components.State.LoadingProgress)GetComponent(StateComponentsLookup.LoadingProgress)).value;
            } 
            set {
                var component = CreateComponent<Components.State.LoadingProgress>(StateComponentsLookup.LoadingProgress);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.LoadingProgress, component);
            }
        }

        public bool HasLoadingProgress() {
            return HasComponent(StateComponentsLookup.LoadingProgress);
        }

        public void RemoveLoadingProgress() {
            if (HasComponent(StateComponentsLookup.LoadingProgress)) { RemoveComponent(StateComponentsLookup.LoadingProgress); }
        }

        public void PingLoadingProgress() {
            var component = GetComponent(StateComponentsLookup.LoadingProgress);
            if (component != null) ReplaceComponent(StateComponentsLookup.LoadingProgress, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.LoadingProgress, null);
        }

        // SceneName
        public string _sceneName { 
            get {
                if (!HasComponent(StateComponentsLookup.SceneName)) throw new System.Exception("Entity does not have component 'SceneName'. You can check safely with 'HasSceneName()'");
                return ((Components.State.SceneName)GetComponent(StateComponentsLookup.SceneName)).value;
            } 
            set {
                ((Components.State.SceneName)GetComponent(StateComponentsLookup.SceneName)).value = value;
            }
        }

        public string sceneName { 
            get {
                if (!HasComponent(StateComponentsLookup.SceneName)) throw new System.Exception("Entity does not have component 'SceneName'. You can check safely with 'HasSceneName()'");
                return ((Components.State.SceneName)GetComponent(StateComponentsLookup.SceneName)).value;
            } 
            set {
                var component = CreateComponent<Components.State.SceneName>(StateComponentsLookup.SceneName);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.SceneName, component);
            }
        }

        public bool HasSceneName() {
            return HasComponent(StateComponentsLookup.SceneName);
        }

        public void RemoveSceneName() {
            if (HasComponent(StateComponentsLookup.SceneName)) { RemoveComponent(StateComponentsLookup.SceneName); }
        }

        public void PingSceneName() {
            var component = GetComponent(StateComponentsLookup.SceneName);
            if (component != null) ReplaceComponent(StateComponentsLookup.SceneName, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.SceneName, null);
        }

        // LoadingManagerUnit
        public Scripts.LoadingManagerUnit _loadingManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingManagerUnit)) throw new System.Exception("Entity does not have component 'LoadingManagerUnit'. You can check safely with 'HasLoadingManagerUnit()'");
                return ((Components.State.LoadingManagerUnit)GetComponent(StateComponentsLookup.LoadingManagerUnit)).value;
            } 
            set {
                ((Components.State.LoadingManagerUnit)GetComponent(StateComponentsLookup.LoadingManagerUnit)).value = value;
            }
        }

        public Scripts.LoadingManagerUnit loadingManagerUnit { 
            get {
                if (!HasComponent(StateComponentsLookup.LoadingManagerUnit)) throw new System.Exception("Entity does not have component 'LoadingManagerUnit'. You can check safely with 'HasLoadingManagerUnit()'");
                return ((Components.State.LoadingManagerUnit)GetComponent(StateComponentsLookup.LoadingManagerUnit)).value;
            } 
            set {
                var component = CreateComponent<Components.State.LoadingManagerUnit>(StateComponentsLookup.LoadingManagerUnit);
                component.value = value;
                ReplaceComponent(StateComponentsLookup.LoadingManagerUnit, component);
            }
        }

        public bool HasLoadingManagerUnit() {
            return HasComponent(StateComponentsLookup.LoadingManagerUnit);
        }

        public void RemoveLoadingManagerUnit() {
            if (HasComponent(StateComponentsLookup.LoadingManagerUnit)) { RemoveComponent(StateComponentsLookup.LoadingManagerUnit); }
        }

        public void PingLoadingManagerUnit() {
            var component = GetComponent(StateComponentsLookup.LoadingManagerUnit);
            if (component != null) ReplaceComponent(StateComponentsLookup.LoadingManagerUnit, component);
            else if (component == null) ReplaceComponent(StateComponentsLookup.LoadingManagerUnit, null);
        }
    }

}
