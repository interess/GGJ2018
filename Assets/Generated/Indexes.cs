// <auto-generated>
//     This code was generated with love by Gentitas.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using Entitas;
using System.Collections.Generic;

namespace DZ.Core.Indexes {
	namespace State {
        public interface ISceneNameIndex {
            /// Value: SceneName  
            StateEntity FindSingle(string value);
            /// Value: SceneName  
            HashSet<StateEntity> Find(string value);
            int GetCount(string value);
        }

        public class SceneNameIndex : Entitas.Gentitas.Index<string, StateEntity>, ISceneNameIndex
        {
            IGroup<StateEntity> groupToWatch;

            public SceneNameIndex(StateContext context) : base()
            {
                groupToWatch = context.GetGroup(Matcher<StateEntity>.AllOf(StateMatcher.SceneName));
                groupToWatch.OnEntityAdded += Added;
                groupToWatch.OnEntityUpdated += Updated;
                groupToWatch.OnEntityRemoved += Removed;
            }

            ~SceneNameIndex () {
                groupToWatch.OnEntityAdded -= Added;
                groupToWatch.OnEntityUpdated -= Updated;
                groupToWatch.OnEntityRemoved -= Removed;
            }

            protected override bool Filter(StateEntity entity)
            {
                return entity.HasSceneName() ;
            }

            void Remove(StateEntity entity, string value) {
                if (lookup.ContainsKey(value))
                {
                    var list = lookup[value];
                    if (list.Contains(entity)) list.Remove(entity);
                }
            }

            void HandleEntity(StateEntity entity, string value)
            {
                if (entity.HasSceneName()) {
                    if (Filter(entity))
                    {
                        HashSet<StateEntity> result;
                        lookup.TryGetValue(value, out result);
                        if (result == null) {
                            result = new HashSet<StateEntity>();
                            lookup.Add(value, result);
                            result.Add(entity);
                        } else {
                            if (!result.Contains(entity)) result.Add(entity);
                        }
                    }
                    else
                    {
                        Remove(entity, value);
                    }
                } else {
                    Remove(entity, value);
                }
            }

            void HandleEntity(StateEntity entity, string value, string previousValue)
            {
                if (value != previousValue)
                {
                    Remove(entity, previousValue);
                }
                
                HandleEntity(entity, value);
            }

            void Added(IGroup<StateEntity> group, StateEntity entity, int index, IComponent component)
            {
                HandleEntity(entity, ((Components.State.SceneName)component).value);
            }

            void Updated(IGroup<StateEntity> group, StateEntity entity, int index, IComponent previousComponent, IComponent component)
            {
                HandleEntity(entity, ((Components.State.SceneName)component).value, ((Components.State.SceneName)previousComponent).value);
            }

            void Removed(IGroup<StateEntity> group, StateEntity entity, int index, IComponent component)
            {
                HandleEntity(entity, ((Components.State.SceneName)component).value);
            }

            public StateEntity FindSingle(string value)
            {
                HashSet<StateEntity> result;
                lookup.TryGetValue(value, out result);

                if (result == null || result.Count == 0) return null;
                if (result.Count > 1) {
                    UnityEngine.Debug.LogError("DZ.Core.SceneNameIndex has more than 1 entity with value " + value);
                    return null;
                }
                
                var enumarator = result.GetEnumerator();
                enumarator.MoveNext();
                
                return enumarator.Current;
            }

            public HashSet<StateEntity> Find(string value)
            {
                HashSet<StateEntity> result;
                lookup.TryGetValue(value, out result);

                if (result == null) {
                    result = lookup[value] = new HashSet<StateEntity>();
                }

                return result;
            }

            public int GetCount(string value)
            {
                HashSet<StateEntity> result;
                lookup.TryGetValue(value, out result);

                if (result == null) return 0;
                return result.Count;
            }
        }
	}
}
namespace DZ.Game.Indexes {
	namespace Input {
	}
	namespace State {
	}
}
