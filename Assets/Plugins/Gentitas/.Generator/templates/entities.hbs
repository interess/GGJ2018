// <auto-generated>
//     This code was generated with love by Gentitas.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using UnityEngine;
using System.Collections.Generic;

{{#each this}}
namespace {{@key}} {
    {{#each universalComponents}}
    public interface I{{toUpper name}}Entity : Entitas.IEntity {
        {{#if type}}
        {{type}} {{toLower @key}} { get; set; }
        {{else}}
        bool {{toLower @key}} { get; set; }
        {{/if}}
        bool Has{{toUpper @key}}();
        void Remove{{toUpper @key}}();
        void Ping{{toUpper @key}}();
    }

    {{/each}}
    {{#each contexts}}
    public sealed partial class {{toUpper @key}}Entity: Entitas.Entity, Entitas.IEntity {
        public {{toUpper @key}}Entity AddComponentByName(string name) {
            var componentIndex = {{toUpper @key}}ComponentsLookup.GetComponentIndex(name);
            if (componentIndex == -1) throw new System.Exception("There is no component named " + name);
            return this.AddComponentByIndex(componentIndex);
        }

        public {{toUpper @key}}Entity AddComponentByIndex(int index) {
            this.AddComponent(index, this.CreateComponent(index, {{toUpper @key}}ComponentsLookup.componentTypes[index]));
            return this;
        }

        //
        // Flag Components
        //
        {{#each flagComponents}}

        // {{toUpper @key}}
        static readonly Components.{{toUpper @../key}}.{{toUpper @key}} _{{toLower @key}}Component = new Components.{{toUpper @../key}}.{{toUpper @key}}();
        public bool {{toLower @key}} {
            get { return HasComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}}); }
            set {
                if (value != {{toLower @key}}) {
                    if (value) {
                        AddComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}}, _{{toLower @key}}Component);
                    } else {
                        RemoveComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}});
                    }
                }
            }
        }

        public bool Has{{toUpper @key}}() {
            return HasComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}});
        }

        public void Remove{{toUpper @key}}() {
            RemoveComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}});
        }

        public void Ping{{toUpper @key}}() {
            var component = GetComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}});
            if (component != null) ReplaceComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}}, component);
            else if (component == null) ReplaceComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}}, null);
        }
        {{/each}}

        //
        // Value Components
        //
        {{#each valueComponents}}

        // {{toUpper @key}}
        public {{type}} _{{toLower @key}} { 
            get {
                if (!HasComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}})) throw new System.Exception("Entity does not have component '{{toUpper @key}}'. You can check safely with 'Has{{toUpper @key}}()'");
                return ((Components.{{toUpper @../key}}.{{toUpper @key}})GetComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}})).value;
            } 
            set {
                ((Components.{{toUpper @../key}}.{{toUpper @key}})GetComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}})).value = value;
            }
        }

        public {{type}} {{toLower @key}} { 
            get {
                if (!HasComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}})) throw new System.Exception("Entity does not have component '{{toUpper @key}}'. You can check safely with 'Has{{toUpper @key}}()'");
                return ((Components.{{toUpper @../key}}.{{toUpper @key}})GetComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}})).value;
            } 
            set {
                var component = CreateComponent<Components.{{toUpper @../key}}.{{toUpper @key}}>({{toUpper @../key}}ComponentsLookup.{{toUpper @key}});
                component.value = value;
                ReplaceComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}}, component);
            }
        }

        public bool Has{{toUpper @key}}() {
            return HasComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}});
        }

        public void Remove{{toUpper @key}}() {
            if (HasComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}})) { RemoveComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}}); }
        }

        public void Ping{{toUpper @key}}() {
            var component = GetComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}});
            if (component != null) ReplaceComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}}, component);
            else if (component == null) ReplaceComponent({{toUpper @../key}}ComponentsLookup.{{toUpper @key}}, null);
        }
        {{/each}}
    }

    {{/each}}
}
{{/each}}
