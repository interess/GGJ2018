// <auto-generated>
//     This code was generated with love by Gentitas.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using Entitas;
using UnityEngine;
using System.Collections.Generic;

{{#each this}}
namespace {{@key}}.Systems {
	public abstract class InitializeSystem : Entitas.Gentitas.Systems.InitializeSystem {
		{{#each contexts}}
		{{#unless settings.isPartial}}
		protected {{toUpper @key}}Context {{toLower @key}} { get { return Contexts.{{toLower @key}}; } }
		{{/unless}}
		{{/each}}

		public InitializeSystem() {
			// Create request to shared instance, so contexts are created before any action.
			{{#each contexts}}
			{{#unless settings.isPartial}}
			var _{{toLower @key}} = Contexts.{{toLower @key}};
			{{/unless}}
			{{/each}} 
		}
	}

	public abstract class ExecuteSystem : Entitas.Gentitas.Systems.ExecuteSystem {
		{{#each contexts}}
		{{#unless settings.isPartial}}
		protected {{toUpper @key}}Context {{toLower @key}} { get { return Contexts.{{toLower @key}}; } }
		{{/unless}}
		{{/each}}

		public ExecuteSystem() {
			// Create request to shared instance, so contexts are created before any action.
			{{#each contexts}}
			{{#unless settings.isPartial}}
			var _{{toLower @key}} = Contexts.{{toLower @key}};
			{{/unless}}
			{{/each}}
		}
	}

	{{#each contexts}}
	public abstract class {{toUpper @key}}ReactiveSystem : Entitas.Gentitas.Systems.ReactiveSystem<{{toUpper @key}}Entity> {
		{{#each ../contexts}}
		protected {{toUpper @key}}Context {{toLower @key}} { get { return Contexts.{{toLower @key}}; } }
		{{/each}}

		public {{toUpper @key}}ReactiveSystem() : base(Contexts.{{toLower @key}}) {
			// Create request to shared instance, so contexts are created before any action.
			{{#each ../contexts}}
			var _{{toLower @key}} = Contexts.{{toLower @key}};
			{{/each}}
		}
	}
	{{/each}}

	public abstract class MultiReactiveSystem<TEntity> : Entitas.Gentitas.Systems.MultiReactiveSystem<TEntity, Contexts>
		where TEntity : class, IEntity
	{
		{{#each contexts}}
		protected {{toUpper @key}}Context {{toLower @key}} { get { return Contexts.{{toLower @key}}; } }
		{{/each}}

		public MultiReactiveSystem() : base(Contexts._sharedInstance) {
			// Create request to shared instance, so contexts are created before any action.
			{{#each contexts}}
			var _{{toLower @key}} = Contexts.{{toLower @key}};
			{{/each}}
		}
	}
}
{{/each}}
